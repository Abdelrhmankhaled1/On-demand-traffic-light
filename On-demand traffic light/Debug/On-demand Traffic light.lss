
On-demand Traffic light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000612  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000612  000006a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800062  00800062  000006a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00000714  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000121e  00000000  00000000  000008ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008c0  00000000  00000000  00001aca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001013  00000000  00000000  0000238a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b8  00000000  00000000  000033a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006353  00000000  00000000  00003658  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000047a  00000000  00000000  000099ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00009e25  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000222e  00000000  00000000  00009f5d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	b8 c0       	rjmp	.+368    	; 0x176 <__vector_1>
   6:	00 00       	nop
   8:	40 c0       	rjmp	.+128    	; 0x8a <__bad_interrupt>
   a:	00 00       	nop
   c:	3e c0       	rjmp	.+124    	; 0x8a <__bad_interrupt>
   e:	00 00       	nop
  10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
  12:	00 00       	nop
  14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
  16:	00 00       	nop
  18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	36 c0       	rjmp	.+108    	; 0x8a <__bad_interrupt>
  1e:	00 00       	nop
  20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
  22:	00 00       	nop
  24:	32 c0       	rjmp	.+100    	; 0x8a <__bad_interrupt>
  26:	00 00       	nop
  28:	30 c0       	rjmp	.+96     	; 0x8a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2e c0       	rjmp	.+92     	; 0x8a <__bad_interrupt>
  2e:	00 00       	nop
  30:	2c c0       	rjmp	.+88     	; 0x8a <__bad_interrupt>
  32:	00 00       	nop
  34:	2a c0       	rjmp	.+84     	; 0x8a <__bad_interrupt>
  36:	00 00       	nop
  38:	28 c0       	rjmp	.+80     	; 0x8a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	26 c0       	rjmp	.+76     	; 0x8a <__bad_interrupt>
  3e:	00 00       	nop
  40:	24 c0       	rjmp	.+72     	; 0x8a <__bad_interrupt>
  42:	00 00       	nop
  44:	22 c0       	rjmp	.+68     	; 0x8a <__bad_interrupt>
  46:	00 00       	nop
  48:	20 c0       	rjmp	.+64     	; 0x8a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1e c0       	rjmp	.+60     	; 0x8a <__bad_interrupt>
  4e:	00 00       	nop
  50:	1c c0       	rjmp	.+56     	; 0x8a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e1       	ldi	r30, 0x12	; 18
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	f9 d0       	rcall	.+498    	; 0x27a <main>
  88:	c2 c2       	rjmp	.+1412   	; 0x60e <_exit>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <app_init>:
int carMode = 1;


void app_init(void)
{
	BUTTON_INIT(BUTTON_PORT,BUTTON_PIN);
  8c:	60 b3       	in	r22, 0x10	; 16
  8e:	64 70       	andi	r22, 0x04	; 4
  90:	84 e4       	ldi	r24, 0x44	; 68
  92:	7f d0       	rcall	.+254    	; 0x192 <BUTTON_INIT>
	LED_INIT(PORT_A,PIN0);
  94:	60 e0       	ldi	r22, 0x00	; 0
  96:	81 e4       	ldi	r24, 0x41	; 65
  98:	7f d0       	rcall	.+254    	; 0x198 <LED_INIT>
	LED_INIT(PORT_A,PIN1);
  9a:	61 e0       	ldi	r22, 0x01	; 1
  9c:	81 e4       	ldi	r24, 0x41	; 65
  9e:	7c d0       	rcall	.+248    	; 0x198 <LED_INIT>
	LED_INIT(PORT_A,PIN2);
  a0:	62 e0       	ldi	r22, 0x02	; 2
  a2:	81 e4       	ldi	r24, 0x41	; 65
  a4:	79 d0       	rcall	.+242    	; 0x198 <LED_INIT>
	LED_INIT(PORT_B,PIN0);
  a6:	60 e0       	ldi	r22, 0x00	; 0
  a8:	82 e4       	ldi	r24, 0x42	; 66
  aa:	76 d0       	rcall	.+236    	; 0x198 <LED_INIT>
	LED_INIT(PORT_B,PIN1);
  ac:	61 e0       	ldi	r22, 0x01	; 1
  ae:	82 e4       	ldi	r24, 0x42	; 66
	LED_INIT(PORT_B,PIN2);
  b0:	73 d0       	rcall	.+230    	; 0x198 <LED_INIT>
  b2:	62 e0       	ldi	r22, 0x02	; 2
  b4:	82 e4       	ldi	r24, 0x42	; 66
  b6:	70 d0       	rcall	.+224    	; 0x198 <LED_INIT>
	Timer0_Init();
  b8:	0f d2       	rcall	.+1054   	; 0x4d8 <Timer0_Init>
  ba:	78 94       	sei
	sei(); 
  bc:	85 b7       	in	r24, 0x35	; 53
	RISING_EDGE_SETUP();
  be:	83 60       	ori	r24, 0x03	; 3
  c0:	85 bf       	out	0x35, r24	; 53
  c2:	8b b7       	in	r24, 0x3b	; 59
	SETUP_INT0();
  c4:	80 64       	ori	r24, 0x40	; 64
  c6:	8b bf       	out	0x3b, r24	; 59
  c8:	08 95       	ret

000000ca <check>:
  ca:	cf 93       	push	r28

	TIMER_yellow_car();
}
}

int check(){
  cc:	df 93       	push	r29
	if(carMode == 0){ //if the ISR is called we will execute the code, else return 0
  ce:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
  d2:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
  d6:	89 2b       	or	r24, r25
  d8:	49 f5       	brne	.+82     	; 0x12c <check+0x62>
		if(carState == 1){   //if car light is green or yellow
  da:	c0 91 64 00 	lds	r28, 0x0064	; 0x800064 <carState>
  de:	d0 91 65 00 	lds	r29, 0x0065	; 0x800065 <carState+0x1>
  e2:	c1 30       	cpi	r28, 0x01	; 1
  e4:	d1 05       	cpc	r29, r1
  e6:	81 f4       	brne	.+32     	; 0x108 <check+0x3e>
			
			LED_all_off();
  e8:	5a d0       	rcall	.+180    	; 0x19e <LED_all_off>
			RP_ON();
  ea:	aa d0       	rcall	.+340    	; 0x240 <RP_ON>
			TIMER_yellow();
  ec:	c2 d0       	rcall	.+388    	; 0x272 <TIMER_yellow>
			RP_OFF();
  ee:	ad d0       	rcall	.+346    	; 0x24a <RP_OFF>
			
			GP_ON();
  f0:	b1 d0       	rcall	.+354    	; 0x254 <GP_ON>
			RC_ON();
  f2:	79 d0       	rcall	.+242    	; 0x1e6 <RC_ON>
  f4:	f4 d1       	rcall	.+1000   	; 0x4de <Timer0_delay>
			Timer0_delay();
  f6:	b3 d0       	rcall	.+358    	; 0x25e <GP_OFF>
  f8:	6b d0       	rcall	.+214    	; 0x1d0 <RC_OFF>
			
			GP_OFF();
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
			RC_OFF();
  fe:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
			
			carMode = 1;
 102:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
			return 1;
		}
		else{ //if car light is red
			LED_all_off();
 106:	14 c0       	rjmp	.+40     	; 0x130 <check+0x66>
 108:	4a d0       	rcall	.+148    	; 0x19e <LED_all_off>
			
			RC_ON();
 10a:	6d d0       	rcall	.+218    	; 0x1e6 <RC_ON>
 10c:	a3 d0       	rcall	.+326    	; 0x254 <GP_ON>
			GP_ON();
 10e:	e7 d1       	rcall	.+974    	; 0x4de <Timer0_delay>
 110:	5f d0       	rcall	.+190    	; 0x1d0 <RC_OFF>
			Timer0_delay();
 112:	af d0       	rcall	.+350    	; 0x272 <TIMER_yellow>
 114:	a4 d0       	rcall	.+328    	; 0x25e <GP_OFF>
			RC_OFF();
 116:	94 d0       	rcall	.+296    	; 0x240 <RP_ON>
 118:	88 d0       	rcall	.+272    	; 0x22a <GC_ON>
			TIMER_yellow();
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
			GP_OFF();
 11e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
			RP_ON();
 122:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
			GC_ON();
 126:	c1 e0       	ldi	r28, 0x01	; 1
 128:	d0 e0       	ldi	r29, 0x00	; 0
			carMode = 1;
 12a:	02 c0       	rjmp	.+4      	; 0x130 <check+0x66>
 12c:	c0 e0       	ldi	r28, 0x00	; 0
 12e:	d0 e0       	ldi	r29, 0x00	; 0
 130:	ce 01       	movw	r24, r28
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
			return 1;
 136:	08 95       	ret

00000138 <app_start>:
 138:	32 d0       	rcall	.+100    	; 0x19e <LED_all_off>
 13a:	77 d0       	rcall	.+238    	; 0x22a <GC_ON>
		}
	}
	return 0;
 13c:	c6 df       	rcall	.-116    	; 0xca <check>
 13e:	01 97       	sbiw	r24, 0x01	; 1
}
 140:	d9 f3       	breq	.-10     	; 0x138 <app_start>
 142:	cd d1       	rcall	.+922    	; 0x4de <Timer0_delay>
 144:	c2 df       	rcall	.-124    	; 0xca <check>
 146:	01 97       	sbiw	r24, 0x01	; 1
	
	Timer0_delay();
	if(check() == 1){
		continue;
	}
	GC_OFF();
 148:	b9 f3       	breq	.-18     	; 0x138 <app_start>
	if(check() == 1){
 14a:	64 d0       	rcall	.+200    	; 0x214 <GC_OFF>
 14c:	be df       	rcall	.-132    	; 0xca <check>
		continue;
	}
	TIMER_yellow_car();
 14e:	01 97       	sbiw	r24, 0x01	; 1
	if(check() == 1){
 150:	99 f3       	breq	.-26     	; 0x138 <app_start>
 152:	5d d0       	rcall	.+186    	; 0x20e <TIMER_yellow_car>
 154:	ba df       	rcall	.-140    	; 0xca <check>
		continue;
	}
	
	RC_ON();
 156:	01 97       	sbiw	r24, 0x01	; 1
	if(check() == 1){
 158:	79 f3       	breq	.-34     	; 0x138 <app_start>
 15a:	45 d0       	rcall	.+138    	; 0x1e6 <RC_ON>
 15c:	b6 df       	rcall	.-148    	; 0xca <check>
		continue;
	}
	Timer0_delay();
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	59 f3       	breq	.-42     	; 0x138 <app_start>
	if(check() == 1){
 162:	bd d1       	rcall	.+890    	; 0x4de <Timer0_delay>
 164:	b2 df       	rcall	.-156    	; 0xca <check>
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	39 f3       	breq	.-50     	; 0x138 <app_start>
		continue;
	}
	RC_OFF();
 16a:	32 d0       	rcall	.+100    	; 0x1d0 <RC_OFF>
 16c:	ae df       	rcall	.-164    	; 0xca <check>
	if(check() == 1){
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	19 f3       	breq	.-58     	; 0x138 <app_start>
 172:	4d d0       	rcall	.+154    	; 0x20e <TIMER_yellow_car>
 174:	e1 cf       	rjmp	.-62     	; 0x138 <app_start>

00000176 <__vector_1>:
		continue;
	}

	TIMER_yellow_car();
 176:	1f 92       	push	r1
 178:	0f 92       	push	r0
 17a:	0f b6       	in	r0, 0x3f	; 63
		}
	}
	return 0;
}

ISR(EXT_INT_0){
 17c:	0f 92       	push	r0
 17e:	11 24       	eor	r1, r1
	carMode = 0;
 180:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__data_start+0x1>
 184:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
}
 188:	0f 90       	pop	r0
 18a:	0f be       	out	0x3f, r0	; 63
 18c:	0f 90       	pop	r0
 18e:	1f 90       	pop	r1
 190:	18 95       	reti

00000192 <BUTTON_INIT>:
 */ 
#include "buttons.h"

void BUTTON_INIT(uint8_t BPort, uint8_t BPin)
{
	DIO_init (BPort, BPin, IN);
 192:	40 e0       	ldi	r20, 0x00	; 0
 194:	75 c0       	rjmp	.+234    	; 0x280 <DIO_init>
 196:	08 95       	ret

00000198 <LED_INIT>:
void GP_OFF(){
	DIO_write(PORT_A,PIN0, LOW); //RED car
}

void YP_ON(){
	DIO_write(PORT_A,PIN1, HIGH); //RED car
 198:	41 e0       	ldi	r20, 0x01	; 1
 19a:	72 c0       	rjmp	.+228    	; 0x280 <DIO_init>
 19c:	08 95       	ret

0000019e <LED_all_off>:
 19e:	41 e0       	ldi	r20, 0x01	; 1
 1a0:	60 e0       	ldi	r22, 0x00	; 0
 1a2:	81 e4       	ldi	r24, 0x41	; 65
 1a4:	e7 d0       	rcall	.+462    	; 0x374 <DIO_write>
 1a6:	41 e0       	ldi	r20, 0x01	; 1
 1a8:	60 e0       	ldi	r22, 0x00	; 0
 1aa:	82 e4       	ldi	r24, 0x42	; 66
 1ac:	e3 d0       	rcall	.+454    	; 0x374 <DIO_write>
 1ae:	41 e0       	ldi	r20, 0x01	; 1
 1b0:	61 e0       	ldi	r22, 0x01	; 1
 1b2:	81 e4       	ldi	r24, 0x41	; 65
 1b4:	df d0       	rcall	.+446    	; 0x374 <DIO_write>
 1b6:	41 e0       	ldi	r20, 0x01	; 1
 1b8:	61 e0       	ldi	r22, 0x01	; 1
 1ba:	82 e4       	ldi	r24, 0x42	; 66
 1bc:	db d0       	rcall	.+438    	; 0x374 <DIO_write>
 1be:	41 e0       	ldi	r20, 0x01	; 1
 1c0:	62 e0       	ldi	r22, 0x02	; 2
 1c2:	81 e4       	ldi	r24, 0x41	; 65
 1c4:	d7 d0       	rcall	.+430    	; 0x374 <DIO_write>
 1c6:	41 e0       	ldi	r20, 0x01	; 1
 1c8:	62 e0       	ldi	r22, 0x02	; 2
 1ca:	82 e4       	ldi	r24, 0x42	; 66
 1cc:	d3 c0       	rjmp	.+422    	; 0x374 <DIO_write>
 1ce:	08 95       	ret

000001d0 <RC_OFF>:
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <carState+0x1>
 1d8:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <carState>
 1dc:	41 e0       	ldi	r20, 0x01	; 1
 1de:	62 e0       	ldi	r22, 0x02	; 2
 1e0:	82 e4       	ldi	r24, 0x42	; 66
 1e2:	c8 c0       	rjmp	.+400    	; 0x374 <DIO_write>
 1e4:	08 95       	ret

000001e6 <RC_ON>:
 1e6:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <carState+0x1>
 1ea:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <carState>
 1ee:	40 e0       	ldi	r20, 0x00	; 0
 1f0:	62 e0       	ldi	r22, 0x02	; 2
 1f2:	82 e4       	ldi	r24, 0x42	; 66
 1f4:	bf c0       	rjmp	.+382    	; 0x374 <DIO_write>
 1f6:	08 95       	ret

000001f8 <YC_OFF>:
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <carState+0x1>
 200:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <carState>
 204:	41 e0       	ldi	r20, 0x01	; 1
 206:	61 e0       	ldi	r22, 0x01	; 1
 208:	82 e4       	ldi	r24, 0x42	; 66
 20a:	b4 c0       	rjmp	.+360    	; 0x374 <DIO_write>
 20c:	08 95       	ret

0000020e <TIMER_yellow_car>:
 20e:	bc d1       	rcall	.+888    	; 0x588 <TIMER_blink_car>
 210:	f3 cf       	rjmp	.-26     	; 0x1f8 <YC_OFF>
 212:	08 95       	ret

00000214 <GC_OFF>:
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <carState+0x1>
 21c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <carState>
 220:	41 e0       	ldi	r20, 0x01	; 1
 222:	60 e0       	ldi	r22, 0x00	; 0
 224:	82 e4       	ldi	r24, 0x42	; 66
 226:	a6 c0       	rjmp	.+332    	; 0x374 <DIO_write>
 228:	08 95       	ret

0000022a <GC_ON>:
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <carState+0x1>
 232:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <carState>
 236:	40 e0       	ldi	r20, 0x00	; 0
 238:	60 e0       	ldi	r22, 0x00	; 0
 23a:	82 e4       	ldi	r24, 0x42	; 66
 23c:	9b c0       	rjmp	.+310    	; 0x374 <DIO_write>
 23e:	08 95       	ret

00000240 <RP_ON>:
 240:	40 e0       	ldi	r20, 0x00	; 0
 242:	62 e0       	ldi	r22, 0x02	; 2
 244:	81 e4       	ldi	r24, 0x41	; 65
 246:	96 c0       	rjmp	.+300    	; 0x374 <DIO_write>
 248:	08 95       	ret

0000024a <RP_OFF>:
 24a:	41 e0       	ldi	r20, 0x01	; 1
 24c:	62 e0       	ldi	r22, 0x02	; 2
 24e:	81 e4       	ldi	r24, 0x41	; 65
 250:	91 c0       	rjmp	.+290    	; 0x374 <DIO_write>
 252:	08 95       	ret

00000254 <GP_ON>:
 254:	40 e0       	ldi	r20, 0x00	; 0
 256:	60 e0       	ldi	r22, 0x00	; 0
 258:	81 e4       	ldi	r24, 0x41	; 65
 25a:	8c c0       	rjmp	.+280    	; 0x374 <DIO_write>
 25c:	08 95       	ret

0000025e <GP_OFF>:
 25e:	41 e0       	ldi	r20, 0x01	; 1
 260:	60 e0       	ldi	r22, 0x00	; 0
 262:	81 e4       	ldi	r24, 0x41	; 65
 264:	87 c0       	rjmp	.+270    	; 0x374 <DIO_write>
 266:	08 95       	ret

00000268 <YP_OFF>:
}

void YP_OFF(){
	DIO_write(PORT_A,PIN1, LOW); //RED car
 268:	41 e0       	ldi	r20, 0x01	; 1
 26a:	61 e0       	ldi	r22, 0x01	; 1
 26c:	81 e4       	ldi	r24, 0x41	; 65
 26e:	82 c0       	rjmp	.+260    	; 0x374 <DIO_write>
 270:	08 95       	ret

00000272 <TIMER_yellow>:
	YC_OFF();
}


void TIMER_yellow(){
	TIMER_blink();
 272:	58 d1       	rcall	.+688    	; 0x524 <TIMER_blink>
	YP_OFF();
 274:	f9 df       	rcall	.-14     	; 0x268 <YP_OFF>
	YC_OFF();
 276:	c0 cf       	rjmp	.-128    	; 0x1f8 <YC_OFF>
 278:	08 95       	ret

0000027a <main>:

#define F_CPU 1000000UL

int main(void)
{
	app_init();
 27a:	08 df       	rcall	.-496    	; 0x8c <app_init>
    while (1) 
    {
		app_start();
 27c:	5d df       	rcall	.-326    	; 0x138 <app_start>
 27e:	fe cf       	rjmp	.-4      	; 0x27c <main+0x2>

00000280 <DIO_init>:
 280:	82 34       	cpi	r24, 0x42	; 66
 */ 
#include "DIO.h"


void DIO_init(uint8_t portNumber, uint8_t pinNumber, uint8_t direction){
	switch(portNumber){
 282:	31 f1       	breq	.+76     	; 0x2d0 <DIO_init+0x50>
 284:	18 f4       	brcc	.+6      	; 0x28c <DIO_init+0xc>
 286:	81 34       	cpi	r24, 0x41	; 65
 288:	39 f0       	breq	.+14     	; 0x298 <DIO_init+0x18>
 28a:	08 95       	ret
 28c:	83 34       	cpi	r24, 0x43	; 67
 28e:	e1 f1       	breq	.+120    	; 0x308 <DIO_init+0x88>
 290:	84 34       	cpi	r24, 0x44	; 68
 292:	09 f4       	brne	.+2      	; 0x296 <DIO_init+0x16>
 294:	54 c0       	rjmp	.+168    	; 0x33e <DIO_init+0xbe>
 296:	08 95       	ret
		case PORT_A:
		if(direction == IN)
 298:	41 11       	cpse	r20, r1
 29a:	0c c0       	rjmp	.+24     	; 0x2b4 <DIO_init+0x34>
		{
			DDRA &= ~(1<<pinNumber);
 29c:	2a b3       	in	r18, 0x1a	; 26
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <DIO_init+0x28>
 2a4:	88 0f       	add	r24, r24
 2a6:	99 1f       	adc	r25, r25
 2a8:	6a 95       	dec	r22
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <DIO_init+0x24>
 2ac:	80 95       	com	r24
 2ae:	82 23       	and	r24, r18
 2b0:	8a bb       	out	0x1a, r24	; 26
 2b2:	08 95       	ret
		}
		else if(direction == OUT)
 2b4:	41 30       	cpi	r20, 0x01	; 1
 2b6:	09 f0       	breq	.+2      	; 0x2ba <DIO_init+0x3a>
 2b8:	5c c0       	rjmp	.+184    	; 0x372 <DIO_init+0xf2>
		{
			DDRA |= (1<<pinNumber);
 2ba:	2a b3       	in	r18, 0x1a	; 26
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <DIO_init+0x46>
 2c2:	88 0f       	add	r24, r24
 2c4:	99 1f       	adc	r25, r25
 2c6:	6a 95       	dec	r22
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <DIO_init+0x42>
 2ca:	82 2b       	or	r24, r18
 2cc:	8a bb       	out	0x1a, r24	; 26
 2ce:	08 95       	ret
		}
		else{}
		break;
		
		case PORT_B:
		if(direction == IN){
 2d0:	41 11       	cpse	r20, r1
 2d2:	0c c0       	rjmp	.+24     	; 0x2ec <DIO_init+0x6c>
			DDRB &= ~(1<<pinNumber);
 2d4:	27 b3       	in	r18, 0x17	; 23
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <DIO_init+0x60>
 2dc:	88 0f       	add	r24, r24
 2de:	99 1f       	adc	r25, r25
 2e0:	6a 95       	dec	r22
 2e2:	e2 f7       	brpl	.-8      	; 0x2dc <DIO_init+0x5c>
 2e4:	80 95       	com	r24
 2e6:	82 23       	and	r24, r18
 2e8:	87 bb       	out	0x17, r24	; 23
 2ea:	08 95       	ret
		}
		else if(direction == OUT)
 2ec:	41 30       	cpi	r20, 0x01	; 1
 2ee:	09 f0       	breq	.+2      	; 0x2f2 <DIO_init+0x72>
 2f0:	40 c0       	rjmp	.+128    	; 0x372 <DIO_init+0xf2>
		{
			DDRB |= (1<<pinNumber);
 2f2:	27 b3       	in	r18, 0x17	; 23
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <DIO_init+0x7e>
 2fa:	88 0f       	add	r24, r24
 2fc:	99 1f       	adc	r25, r25
 2fe:	6a 95       	dec	r22
 300:	e2 f7       	brpl	.-8      	; 0x2fa <DIO_init+0x7a>
 302:	82 2b       	or	r24, r18
 304:	87 bb       	out	0x17, r24	; 23
 306:	08 95       	ret
		}
		else{}
		break;
		
		case PORT_C:
		if(direction == IN)
 308:	41 11       	cpse	r20, r1
 30a:	0c c0       	rjmp	.+24     	; 0x324 <DIO_init+0xa4>
		{
			DDRC &= ~(1<<pinNumber);
 30c:	24 b3       	in	r18, 0x14	; 20
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	02 c0       	rjmp	.+4      	; 0x318 <DIO_init+0x98>
 314:	88 0f       	add	r24, r24
 316:	99 1f       	adc	r25, r25
 318:	6a 95       	dec	r22
 31a:	e2 f7       	brpl	.-8      	; 0x314 <DIO_init+0x94>
 31c:	80 95       	com	r24
 31e:	82 23       	and	r24, r18
 320:	84 bb       	out	0x14, r24	; 20
 322:	08 95       	ret
		}
		else if(direction == OUT)
 324:	41 30       	cpi	r20, 0x01	; 1
 326:	29 f5       	brne	.+74     	; 0x372 <DIO_init+0xf2>
		{
			DDRC |= (1<<pinNumber);
 328:	24 b3       	in	r18, 0x14	; 20
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	02 c0       	rjmp	.+4      	; 0x334 <DIO_init+0xb4>
 330:	88 0f       	add	r24, r24
 332:	99 1f       	adc	r25, r25
 334:	6a 95       	dec	r22
 336:	e2 f7       	brpl	.-8      	; 0x330 <DIO_init+0xb0>
 338:	82 2b       	or	r24, r18
 33a:	84 bb       	out	0x14, r24	; 20
 33c:	08 95       	ret
		}
		else{}
		break;
		
		case PORT_D:
		if(direction == IN)
 33e:	41 11       	cpse	r20, r1
 340:	0c c0       	rjmp	.+24     	; 0x35a <DIO_init+0xda>
		{
			DDRD &= ~(1<<pinNumber);
 342:	21 b3       	in	r18, 0x11	; 17
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	02 c0       	rjmp	.+4      	; 0x34e <DIO_init+0xce>
 34a:	88 0f       	add	r24, r24
 34c:	99 1f       	adc	r25, r25
 34e:	6a 95       	dec	r22
 350:	e2 f7       	brpl	.-8      	; 0x34a <DIO_init+0xca>
 352:	80 95       	com	r24
 354:	82 23       	and	r24, r18
 356:	81 bb       	out	0x11, r24	; 17
 358:	08 95       	ret
		}
		else if(direction == OUT)
 35a:	41 30       	cpi	r20, 0x01	; 1
 35c:	51 f4       	brne	.+20     	; 0x372 <DIO_init+0xf2>
		{
			DDRD |= (1<<pinNumber);
 35e:	21 b3       	in	r18, 0x11	; 17
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	02 c0       	rjmp	.+4      	; 0x36a <DIO_init+0xea>
 366:	88 0f       	add	r24, r24
 368:	99 1f       	adc	r25, r25
 36a:	6a 95       	dec	r22
 36c:	e2 f7       	brpl	.-8      	; 0x366 <DIO_init+0xe6>
 36e:	82 2b       	or	r24, r18
 370:	81 bb       	out	0x11, r24	; 17
 372:	08 95       	ret

00000374 <DIO_write>:
		break;
	}
}

void DIO_write(uint8_t portNumber, uint8_t pinNumber, uint8_t value){
	switch(portNumber){
 374:	82 34       	cpi	r24, 0x42	; 66
 376:	29 f1       	breq	.+74     	; 0x3c2 <DIO_write+0x4e>
 378:	18 f4       	brcc	.+6      	; 0x380 <DIO_write+0xc>
 37a:	81 34       	cpi	r24, 0x41	; 65
 37c:	39 f0       	breq	.+14     	; 0x38c <DIO_write+0x18>
 37e:	08 95       	ret
 380:	83 34       	cpi	r24, 0x43	; 67
 382:	d1 f1       	breq	.+116    	; 0x3f8 <DIO_write+0x84>
 384:	84 34       	cpi	r24, 0x44	; 68
 386:	09 f4       	brne	.+2      	; 0x38a <DIO_write+0x16>
 388:	52 c0       	rjmp	.+164    	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 38a:	08 95       	ret
		case PORT_A :
		if(value == LOW)
 38c:	41 30       	cpi	r20, 0x01	; 1
 38e:	61 f4       	brne	.+24     	; 0x3a8 <DIO_write+0x34>
		{
			PORTA &= ~(1<<pinNumber);
 390:	2b b3       	in	r18, 0x1b	; 27
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	02 c0       	rjmp	.+4      	; 0x39c <DIO_write+0x28>
 398:	88 0f       	add	r24, r24
 39a:	99 1f       	adc	r25, r25
 39c:	6a 95       	dec	r22
 39e:	e2 f7       	brpl	.-8      	; 0x398 <DIO_write+0x24>
 3a0:	80 95       	com	r24
 3a2:	82 23       	and	r24, r18
 3a4:	8b bb       	out	0x1b, r24	; 27
 3a6:	08 95       	ret
		}
		else if(value == HIGH)
 3a8:	41 11       	cpse	r20, r1
 3aa:	5b c0       	rjmp	.+182    	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
		{
			PORTA |= (1<<pinNumber);
 3ac:	2b b3       	in	r18, 0x1b	; 27
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <DIO_write+0x44>
 3b4:	88 0f       	add	r24, r24
 3b6:	99 1f       	adc	r25, r25
 3b8:	6a 95       	dec	r22
 3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <DIO_write+0x40>
 3bc:	82 2b       	or	r24, r18
 3be:	8b bb       	out	0x1b, r24	; 27
 3c0:	08 95       	ret
		}
		else{}
		break;
		
		case PORT_B :
		if(value == LOW)
 3c2:	41 30       	cpi	r20, 0x01	; 1
 3c4:	61 f4       	brne	.+24     	; 0x3de <DIO_write+0x6a>
		{
			PORTB &= ~(1<<pinNumber);
 3c6:	28 b3       	in	r18, 0x18	; 24
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <DIO_write+0x5e>
 3ce:	88 0f       	add	r24, r24
 3d0:	99 1f       	adc	r25, r25
 3d2:	6a 95       	dec	r22
 3d4:	e2 f7       	brpl	.-8      	; 0x3ce <DIO_write+0x5a>
 3d6:	80 95       	com	r24
 3d8:	82 23       	and	r24, r18
 3da:	88 bb       	out	0x18, r24	; 24
 3dc:	08 95       	ret
		}
		else if(value == HIGH)
 3de:	41 11       	cpse	r20, r1
 3e0:	40 c0       	rjmp	.+128    	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
		{
			PORTB |= (1<<pinNumber);
 3e2:	28 b3       	in	r18, 0x18	; 24
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	02 c0       	rjmp	.+4      	; 0x3ee <DIO_write+0x7a>
 3ea:	88 0f       	add	r24, r24
 3ec:	99 1f       	adc	r25, r25
 3ee:	6a 95       	dec	r22
 3f0:	e2 f7       	brpl	.-8      	; 0x3ea <DIO_write+0x76>
 3f2:	82 2b       	or	r24, r18
 3f4:	88 bb       	out	0x18, r24	; 24
 3f6:	08 95       	ret
		}
		else{}
		break;
		
		case PORT_C :
		if(value == LOW)
 3f8:	41 30       	cpi	r20, 0x01	; 1
 3fa:	61 f4       	brne	.+24     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
		{
			PORTC &= ~(1<<pinNumber);
 3fc:	25 b3       	in	r18, 0x15	; 21
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	02 c0       	rjmp	.+4      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 404:	88 0f       	add	r24, r24
 406:	99 1f       	adc	r25, r25
 408:	6a 95       	dec	r22
 40a:	e2 f7       	brpl	.-8      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 40c:	80 95       	com	r24
 40e:	82 23       	and	r24, r18
 410:	85 bb       	out	0x15, r24	; 21
 412:	08 95       	ret
		}
		else if(value == HIGH)
 414:	41 11       	cpse	r20, r1
 416:	25 c0       	rjmp	.+74     	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
		{
			PORTC |= (1<<pinNumber);
 418:	25 b3       	in	r18, 0x15	; 21
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	02 c0       	rjmp	.+4      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 420:	88 0f       	add	r24, r24
 422:	99 1f       	adc	r25, r25
 424:	6a 95       	dec	r22
 426:	e2 f7       	brpl	.-8      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 428:	82 2b       	or	r24, r18
 42a:	85 bb       	out	0x15, r24	; 21
 42c:	08 95       	ret
		}
		else{}
		break;
		
		case PORT_D :
		if(value == LOW)
 42e:	41 30       	cpi	r20, 0x01	; 1
 430:	61 f4       	brne	.+24     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
		{
			PORTD &= ~(1<<pinNumber);
 432:	22 b3       	in	r18, 0x12	; 18
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	02 c0       	rjmp	.+4      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 43a:	88 0f       	add	r24, r24
 43c:	99 1f       	adc	r25, r25
 43e:	6a 95       	dec	r22
 440:	e2 f7       	brpl	.-8      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 442:	80 95       	com	r24
 444:	82 23       	and	r24, r18
 446:	82 bb       	out	0x12, r24	; 18
 448:	08 95       	ret
		}
		else if(value == HIGH)
 44a:	41 11       	cpse	r20, r1
 44c:	0a c0       	rjmp	.+20     	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
		{
			PORTD |= (1<<pinNumber);
 44e:	22 b3       	in	r18, 0x12	; 18
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	02 c0       	rjmp	.+4      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 456:	88 0f       	add	r24, r24
 458:	99 1f       	adc	r25, r25
 45a:	6a 95       	dec	r22
 45c:	e2 f7       	brpl	.-8      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 45e:	82 2b       	or	r24, r18
 460:	82 bb       	out	0x12, r24	; 18
 462:	08 95       	ret

00000464 <DIO_toggle>:
		break;
	}
}

void DIO_toggle(uint8_t portNumber, uint8_t pinNumber){
	switch(portNumber){
 464:	82 34       	cpi	r24, 0x42	; 66
 466:	b9 f0       	breq	.+46     	; 0x496 <DIO_toggle+0x32>
 468:	18 f4       	brcc	.+6      	; 0x470 <DIO_toggle+0xc>
 46a:	81 34       	cpi	r24, 0x41	; 65
 46c:	31 f0       	breq	.+12     	; 0x47a <DIO_toggle+0x16>
 46e:	08 95       	ret
 470:	83 34       	cpi	r24, 0x43	; 67
 472:	e1 f0       	breq	.+56     	; 0x4ac <DIO_toggle+0x48>
 474:	84 34       	cpi	r24, 0x44	; 68
 476:	29 f1       	breq	.+74     	; 0x4c2 <DIO_toggle+0x5e>
 478:	08 95       	ret
		case PORT_A:
		PORTA ^= (1<<7);//This line serves no function but it was added as the code for some reason skipped the first line, so I added anything here as it is already skipped
 47a:	8b b3       	in	r24, 0x1b	; 27
 47c:	80 58       	subi	r24, 0x80	; 128
 47e:	8b bb       	out	0x1b, r24	; 27
		PORTA ^= (1<<pinNumber);
 480:	2b b3       	in	r18, 0x1b	; 27
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	02 c0       	rjmp	.+4      	; 0x48c <DIO_toggle+0x28>
 488:	88 0f       	add	r24, r24
 48a:	99 1f       	adc	r25, r25
 48c:	6a 95       	dec	r22
 48e:	e2 f7       	brpl	.-8      	; 0x488 <DIO_toggle+0x24>
 490:	82 27       	eor	r24, r18
 492:	8b bb       	out	0x1b, r24	; 27
		break;
 494:	08 95       	ret
		
		case PORT_B:
		PORTB ^= (1<<pinNumber);
 496:	28 b3       	in	r18, 0x18	; 24
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	02 c0       	rjmp	.+4      	; 0x4a2 <DIO_toggle+0x3e>
 49e:	88 0f       	add	r24, r24
 4a0:	99 1f       	adc	r25, r25
 4a2:	6a 95       	dec	r22
 4a4:	e2 f7       	brpl	.-8      	; 0x49e <DIO_toggle+0x3a>
 4a6:	82 27       	eor	r24, r18
 4a8:	88 bb       	out	0x18, r24	; 24
		break;
 4aa:	08 95       	ret
		
		case PORT_C:
		PORTC ^= (1<<pinNumber);
 4ac:	25 b3       	in	r18, 0x15	; 21
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <DIO_toggle+0x54>
 4b4:	88 0f       	add	r24, r24
 4b6:	99 1f       	adc	r25, r25
 4b8:	6a 95       	dec	r22
 4ba:	e2 f7       	brpl	.-8      	; 0x4b4 <DIO_toggle+0x50>
 4bc:	82 27       	eor	r24, r18
 4be:	85 bb       	out	0x15, r24	; 21
		break;
 4c0:	08 95       	ret
		
		case PORT_D:
		PORTD ^= (1<<pinNumber);
 4c2:	22 b3       	in	r18, 0x12	; 18
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <DIO_toggle+0x6a>
 4ca:	88 0f       	add	r24, r24
 4cc:	99 1f       	adc	r25, r25
 4ce:	6a 95       	dec	r22
 4d0:	e2 f7       	brpl	.-8      	; 0x4ca <DIO_toggle+0x66>
 4d2:	82 27       	eor	r24, r18
 4d4:	82 bb       	out	0x12, r24	; 18
 4d6:	08 95       	ret

000004d8 <Timer0_Init>:



void Timer0_Init()
{
	TCCR0 = 0x00;
 4d8:	13 be       	out	0x33, r1	; 51
	TCNT0 = 0x00; 
 4da:	12 be       	out	0x32, r1	; 50
 4dc:	08 95       	ret

000004de <Timer0_delay>:
}

void Timer0_delay()
{
	TCCR0 |= (1<<0);
 4de:	83 b7       	in	r24, 0x33	; 51
 4e0:	81 60       	ori	r24, 0x01	; 1
 4e2:	83 bf       	out	0x33, r24	; 51
	i = 0;
 4e4:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__data_end+0x1>
 4e8:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
	while(i < overflows && ((PIND&0b00000100) == 0) ){   
 4ec:	82 99       	sbic	0x10, 2	; 16
 4ee:	14 c0       	rjmp	.+40     	; 0x518 <Timer0_delay+0x3a>
		while((TIFR & (1<<0)) == 0 ); 
 4f0:	08 b6       	in	r0, 0x38	; 56
 4f2:	00 fe       	sbrs	r0, 0
 4f4:	fd cf       	rjmp	.-6      	; 0x4f0 <Timer0_delay+0x12>
		TIFR |= (1<<0);
 4f6:	88 b7       	in	r24, 0x38	; 56
 4f8:	81 60       	ori	r24, 0x01	; 1
 4fa:	88 bf       	out	0x38, r24	; 56
		i++;
 4fc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 500:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 504:	01 96       	adiw	r24, 0x01	; 1
 506:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
 50a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>

void Timer0_delay()
{
	TCCR0 |= (1<<0);
	i = 0;
	while(i < overflows && ((PIND&0b00000100) == 0) ){   
 50e:	8c 34       	cpi	r24, 0x4C	; 76
 510:	9c 44       	sbci	r25, 0x4C	; 76
 512:	10 f4       	brcc	.+4      	; 0x518 <Timer0_delay+0x3a>
 514:	82 9b       	sbis	0x10, 2	; 16
 516:	ec cf       	rjmp	.-40     	; 0x4f0 <Timer0_delay+0x12>
		while((TIFR & (1<<0)) == 0 ); 
		TIFR |= (1<<0);
		i++;
	}
	i = 0;
 518:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__data_end+0x1>
 51c:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
	TCCR0 = 0x00;
 520:	13 be       	out	0x33, r1	; 51
 522:	08 95       	ret

00000524 <TIMER_blink>:
}
void TIMER_blink(){
 524:	cf 93       	push	r28
 526:	df 93       	push	r29
	TCCR0 |= (1<<0);
 528:	83 b7       	in	r24, 0x33	; 51
 52a:	81 60       	ori	r24, 0x01	; 1
 52c:	83 bf       	out	0x33, r24	; 51
	while(i < overflows && ((PIND&0b00000100) == 0)){
		while((TIFR & (1<<0)) == 0 );
		TIFR |= (1<<0);
		i++;
		if(i % 1953 == 0){
 52e:	c1 ea       	ldi	r28, 0xA1	; 161
 530:	d7 e0       	ldi	r29, 0x07	; 7
	i = 0;
	TCCR0 = 0x00;
}
void TIMER_blink(){
	TCCR0 |= (1<<0);
	while(i < overflows && ((PIND&0b00000100) == 0)){
 532:	19 c0       	rjmp	.+50     	; 0x566 <TIMER_blink+0x42>
		while((TIFR & (1<<0)) == 0 );
 534:	08 b6       	in	r0, 0x38	; 56
 536:	00 fe       	sbrs	r0, 0
 538:	fd cf       	rjmp	.-6      	; 0x534 <TIMER_blink+0x10>
		TIFR |= (1<<0);
 53a:	88 b7       	in	r24, 0x38	; 56
 53c:	81 60       	ori	r24, 0x01	; 1
 53e:	88 bf       	out	0x38, r24	; 56
		i++;
 540:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 544:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 548:	01 96       	adiw	r24, 0x01	; 1
 54a:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
 54e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
		if(i % 1953 == 0){
 552:	be 01       	movw	r22, r28
 554:	48 d0       	rcall	.+144    	; 0x5e6 <__udivmodhi4>
 556:	89 2b       	or	r24, r25
 558:	31 f4       	brne	.+12     	; 0x566 <TIMER_blink+0x42>
				DIO_toggle(PORT_A,PIN1);
 55a:	61 e0       	ldi	r22, 0x01	; 1
 55c:	81 e4       	ldi	r24, 0x41	; 65
 55e:	82 df       	rcall	.-252    	; 0x464 <DIO_toggle>
				DIO_toggle(PORT_B,PIN1);
 560:	61 e0       	ldi	r22, 0x01	; 1
 562:	82 e4       	ldi	r24, 0x42	; 66
 564:	7f df       	rcall	.-258    	; 0x464 <DIO_toggle>
	i = 0;
	TCCR0 = 0x00;
}
void TIMER_blink(){
	TCCR0 |= (1<<0);
	while(i < overflows && ((PIND&0b00000100) == 0)){
 566:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 56a:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 56e:	8c 34       	cpi	r24, 0x4C	; 76
 570:	9c 44       	sbci	r25, 0x4C	; 76
 572:	10 f4       	brcc	.+4      	; 0x578 <TIMER_blink+0x54>
 574:	82 9b       	sbis	0x10, 2	; 16
 576:	de cf       	rjmp	.-68     	; 0x534 <TIMER_blink+0x10>
		if(i % 1953 == 0){
				DIO_toggle(PORT_A,PIN1);
				DIO_toggle(PORT_B,PIN1);
		}
	}
	i = 0;
 578:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__data_end+0x1>
 57c:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
	TCCR0 = 0x00;
 580:	13 be       	out	0x33, r1	; 51
}
 582:	df 91       	pop	r29
 584:	cf 91       	pop	r28
 586:	08 95       	ret

00000588 <TIMER_blink_car>:

void TIMER_blink_car(){
 588:	cf 93       	push	r28
 58a:	df 93       	push	r29
	TCCR0 |= (1<<0);
 58c:	83 b7       	in	r24, 0x33	; 51
 58e:	81 60       	ori	r24, 0x01	; 1
 590:	83 bf       	out	0x33, r24	; 51
	while(i < overflows  && ((PIND&0b00000100) == 0) ){
		while((TIFR & (1<<0)) == 0 );
		TIFR |= (1<<0);
		i++;
		if(i % 1953 == 0){
 592:	c1 ea       	ldi	r28, 0xA1	; 161
 594:	d7 e0       	ldi	r29, 0x07	; 7
	TCCR0 = 0x00;
}

void TIMER_blink_car(){
	TCCR0 |= (1<<0);
	while(i < overflows  && ((PIND&0b00000100) == 0) ){
 596:	16 c0       	rjmp	.+44     	; 0x5c4 <TIMER_blink_car+0x3c>
		while((TIFR & (1<<0)) == 0 );
 598:	08 b6       	in	r0, 0x38	; 56
 59a:	00 fe       	sbrs	r0, 0
 59c:	fd cf       	rjmp	.-6      	; 0x598 <TIMER_blink_car+0x10>
		TIFR |= (1<<0);
 59e:	88 b7       	in	r24, 0x38	; 56
 5a0:	81 60       	ori	r24, 0x01	; 1
 5a2:	88 bf       	out	0x38, r24	; 56
		i++;
 5a4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 5a8:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 5ac:	01 96       	adiw	r24, 0x01	; 1
 5ae:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
 5b2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
		if(i % 1953 == 0){
 5b6:	be 01       	movw	r22, r28
 5b8:	16 d0       	rcall	.+44     	; 0x5e6 <__udivmodhi4>
 5ba:	89 2b       	or	r24, r25
 5bc:	19 f4       	brne	.+6      	; 0x5c4 <TIMER_blink_car+0x3c>
			DIO_toggle(PORT_B,PIN1);
 5be:	61 e0       	ldi	r22, 0x01	; 1
 5c0:	82 e4       	ldi	r24, 0x42	; 66
 5c2:	50 df       	rcall	.-352    	; 0x464 <DIO_toggle>
	TCCR0 = 0x00;
}

void TIMER_blink_car(){
	TCCR0 |= (1<<0);
	while(i < overflows  && ((PIND&0b00000100) == 0) ){
 5c4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 5c8:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 5cc:	8c 34       	cpi	r24, 0x4C	; 76
 5ce:	9c 44       	sbci	r25, 0x4C	; 76
 5d0:	10 f4       	brcc	.+4      	; 0x5d6 <TIMER_blink_car+0x4e>
 5d2:	82 9b       	sbis	0x10, 2	; 16
 5d4:	e1 cf       	rjmp	.-62     	; 0x598 <TIMER_blink_car+0x10>
		i++;
		if(i % 1953 == 0){
			DIO_toggle(PORT_B,PIN1);
		}
	}
	i = 0;
 5d6:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__data_end+0x1>
 5da:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
	TCCR0 = 0x00;
 5de:	13 be       	out	0x33, r1	; 51
 5e0:	df 91       	pop	r29
 5e2:	cf 91       	pop	r28
 5e4:	08 95       	ret

000005e6 <__udivmodhi4>:
 5e6:	aa 1b       	sub	r26, r26
 5e8:	bb 1b       	sub	r27, r27
 5ea:	51 e1       	ldi	r21, 0x11	; 17
 5ec:	07 c0       	rjmp	.+14     	; 0x5fc <__udivmodhi4_ep>

000005ee <__udivmodhi4_loop>:
 5ee:	aa 1f       	adc	r26, r26
 5f0:	bb 1f       	adc	r27, r27
 5f2:	a6 17       	cp	r26, r22
 5f4:	b7 07       	cpc	r27, r23
 5f6:	10 f0       	brcs	.+4      	; 0x5fc <__udivmodhi4_ep>
 5f8:	a6 1b       	sub	r26, r22
 5fa:	b7 0b       	sbc	r27, r23

000005fc <__udivmodhi4_ep>:
 5fc:	88 1f       	adc	r24, r24
 5fe:	99 1f       	adc	r25, r25
 600:	5a 95       	dec	r21
 602:	a9 f7       	brne	.-22     	; 0x5ee <__udivmodhi4_loop>
 604:	80 95       	com	r24
 606:	90 95       	com	r25
 608:	bc 01       	movw	r22, r24
 60a:	cd 01       	movw	r24, r26
 60c:	08 95       	ret

0000060e <_exit>:
 60e:	f8 94       	cli

00000610 <__stop_program>:
 610:	ff cf       	rjmp	.-2      	; 0x610 <__stop_program>
