
On-demand traffic light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000006aa  0000073e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800062  00800062  00000740  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000740  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000770  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  000007ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001057  00000000  00000000  000008f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000947  00000000  00000000  0000194b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009c5  00000000  00000000  00002292  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ec  00000000  00000000  00002c58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000486  00000000  00000000  00002e44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003ce  00000000  00000000  000032ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00003698  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 36 01 	jmp	0x26c	; 0x26c <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ea       	ldi	r30, 0xAA	; 170
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 8e 01 	call	0x31c	; 0x31c <main>
  8a:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <app_init>:
int flag = 1;


void app_init(void){
	
	BUTTON_INIT(BUTTON_PORT,BUTTON_PIN);
  92:	60 b3       	in	r22, 0x10	; 16
  94:	64 70       	andi	r22, 0x04	; 4
  96:	84 e4       	ldi	r24, 0x44	; 68
  98:	0e 94 44 01 	call	0x288	; 0x288 <BUTTON_INIT>

	LED_INIT(PORT_A,PIN0);
  9c:	60 e0       	ldi	r22, 0x00	; 0
  9e:	81 e4       	ldi	r24, 0x41	; 65
  a0:	0e 94 7f 01 	call	0x2fe	; 0x2fe <LED_INIT>
	LED_INIT(PORT_A,PIN1);
  a4:	61 e0       	ldi	r22, 0x01	; 1
  a6:	81 e4       	ldi	r24, 0x41	; 65
  a8:	0e 94 7f 01 	call	0x2fe	; 0x2fe <LED_INIT>
	LED_INIT(PORT_A,PIN2);
  ac:	62 e0       	ldi	r22, 0x02	; 2
  ae:	81 e4       	ldi	r24, 0x41	; 65
  b0:	0e 94 7f 01 	call	0x2fe	; 0x2fe <LED_INIT>
	
	LED_INIT(PORT_B,PIN0);
  b4:	60 e0       	ldi	r22, 0x00	; 0
  b6:	82 e4       	ldi	r24, 0x42	; 66
  b8:	0e 94 7f 01 	call	0x2fe	; 0x2fe <LED_INIT>
	LED_INIT(PORT_B,PIN1);
  bc:	61 e0       	ldi	r22, 0x01	; 1
  be:	82 e4       	ldi	r24, 0x42	; 66
  c0:	0e 94 7f 01 	call	0x2fe	; 0x2fe <LED_INIT>
	LED_INIT(PORT_B,PIN2);
  c4:	62 e0       	ldi	r22, 0x02	; 2
  c6:	82 e4       	ldi	r24, 0x42	; 66
  c8:	0e 94 7f 01 	call	0x2fe	; 0x2fe <LED_INIT>
	
	Timer0_Init();
  cc:	0e 94 bc 02 	call	0x578	; 0x578 <Timer0_Init>
	sei();
  d0:	78 94       	sei
	RISING_EDGE_SETUP();
  d2:	85 b7       	in	r24, 0x35	; 53
  d4:	83 60       	ori	r24, 0x03	; 3
  d6:	85 bf       	out	0x35, r24	; 53
	SETUP_INT0();
  d8:	8b b7       	in	r24, 0x3b	; 59
  da:	80 64       	ori	r24, 0x40	; 64
  dc:	8b bf       	out	0x3b, r24	; 59
  de:	08 95       	ret

000000e0 <test>:
		}
		Car_yellow_led_timer();
	}
}

int test(){
  e0:	0f 93       	push	r16
  e2:	1f 93       	push	r17
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
	if(flag == 0){
  e8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
  ec:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
  f0:	89 2b       	or	r24, r25
  f2:	09 f0       	breq	.+2      	; 0xf6 <test+0x16>
  f4:	65 c0       	rjmp	.+202    	; 0x1c0 <test+0xe0>
		if(State == 1){
  f6:	c0 91 64 00 	lds	r28, 0x0064	; 0x800064 <State>
  fa:	d0 91 65 00 	lds	r29, 0x0065	; 0x800065 <State+0x1>
  fe:	c1 30       	cpi	r28, 0x01	; 1
 100:	d1 05       	cpc	r29, r1
 102:	69 f5       	brne	.+90     	; 0x15e <test+0x7e>
			
			ALL_OFF();
 104:	0e 94 48 01 	call	0x290	; 0x290 <ALL_OFF>
			LED_ON(PORT_A,PIN2);
 108:	62 e0       	ldi	r22, 0x02	; 2
 10a:	81 e4       	ldi	r24, 0x41	; 65
 10c:	0e 94 83 01 	call	0x306	; 0x306 <LED_ON>
			Yellow_led_timer();
 110:	0e 94 6e 01 	call	0x2dc	; 0x2dc <Yellow_led_timer>
			LED_OFF(PORT_A,PIN2);
 114:	62 e0       	ldi	r22, 0x02	; 2
 116:	81 e4       	ldi	r24, 0x41	; 65
 118:	0e 94 87 01 	call	0x30e	; 0x30e <LED_OFF>
			
			LED_ON(PORT_A,PIN0);
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	81 e4       	ldi	r24, 0x41	; 65
 120:	0e 94 83 01 	call	0x306	; 0x306 <LED_ON>
			State = 0;
 124:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <State+0x1>
 128:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <State>
			LED_ON(PORT_B,PIN2);
 12c:	62 e0       	ldi	r22, 0x02	; 2
 12e:	82 e4       	ldi	r24, 0x42	; 66
 130:	0e 94 83 01 	call	0x306	; 0x306 <LED_ON>
			TIMER0_delay();
 134:	0e 94 bf 02 	call	0x57e	; 0x57e <TIMER0_delay>
			LED_OFF(PORT_A,PIN0);
 138:	60 e0       	ldi	r22, 0x00	; 0
 13a:	81 e4       	ldi	r24, 0x41	; 65
 13c:	0e 94 87 01 	call	0x30e	; 0x30e <LED_OFF>
			State = 1;
 140:	01 e0       	ldi	r16, 0x01	; 1
 142:	10 e0       	ldi	r17, 0x00	; 0
 144:	10 93 65 00 	sts	0x0065, r17	; 0x800065 <State+0x1>
 148:	00 93 64 00 	sts	0x0064, r16	; 0x800064 <State>
			LED_OFF(PORT_B,PIN2);
 14c:	62 e0       	ldi	r22, 0x02	; 2
 14e:	82 e4       	ldi	r24, 0x42	; 66
 150:	0e 94 87 01 	call	0x30e	; 0x30e <LED_OFF>
			
			flag = 1;
 154:	10 93 61 00 	sts	0x0061, r17	; 0x800061 <__data_start+0x1>
 158:	00 93 60 00 	sts	0x0060, r16	; 0x800060 <__data_start>
			return 1;
 15c:	33 c0       	rjmp	.+102    	; 0x1c4 <test+0xe4>
		}
		else{
			ALL_OFF();
 15e:	0e 94 48 01 	call	0x290	; 0x290 <ALL_OFF>
			
			State = 0;
 162:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <State+0x1>
 166:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <State>
			LED_ON(PORT_B,PIN2);
 16a:	62 e0       	ldi	r22, 0x02	; 2
 16c:	82 e4       	ldi	r24, 0x42	; 66
 16e:	0e 94 83 01 	call	0x306	; 0x306 <LED_ON>
			LED_ON(PORT_A,PIN0);
 172:	60 e0       	ldi	r22, 0x00	; 0
 174:	81 e4       	ldi	r24, 0x41	; 65
 176:	0e 94 83 01 	call	0x306	; 0x306 <LED_ON>
			TIMER0_delay();
 17a:	0e 94 bf 02 	call	0x57e	; 0x57e <TIMER0_delay>
			State = 1;
 17e:	c1 e0       	ldi	r28, 0x01	; 1
 180:	d0 e0       	ldi	r29, 0x00	; 0
 182:	d0 93 65 00 	sts	0x0065, r29	; 0x800065 <State+0x1>
 186:	c0 93 64 00 	sts	0x0064, r28	; 0x800064 <State>
			LED_OFF(PORT_B,PIN2);
 18a:	62 e0       	ldi	r22, 0x02	; 2
 18c:	82 e4       	ldi	r24, 0x42	; 66
 18e:	0e 94 87 01 	call	0x30e	; 0x30e <LED_OFF>
			Yellow_led_timer();
 192:	0e 94 6e 01 	call	0x2dc	; 0x2dc <Yellow_led_timer>
			LED_OFF(PORT_A,PIN0);
 196:	60 e0       	ldi	r22, 0x00	; 0
 198:	81 e4       	ldi	r24, 0x41	; 65
 19a:	0e 94 87 01 	call	0x30e	; 0x30e <LED_OFF>
			LED_ON(PORT_A,PIN2);
 19e:	62 e0       	ldi	r22, 0x02	; 2
 1a0:	81 e4       	ldi	r24, 0x41	; 65
 1a2:	0e 94 83 01 	call	0x306	; 0x306 <LED_ON>
			State = 1;
 1a6:	d0 93 65 00 	sts	0x0065, r29	; 0x800065 <State+0x1>
 1aa:	c0 93 64 00 	sts	0x0064, r28	; 0x800064 <State>
			LED_ON(PORT_B,PIN0);
 1ae:	60 e0       	ldi	r22, 0x00	; 0
 1b0:	82 e4       	ldi	r24, 0x42	; 66
 1b2:	0e 94 83 01 	call	0x306	; 0x306 <LED_ON>
			flag = 1;
 1b6:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <__data_start+0x1>
 1ba:	c0 93 60 00 	sts	0x0060, r28	; 0x800060 <__data_start>
			return 1;
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <test+0xe4>
		}
	}
	return 0;
 1c0:	c0 e0       	ldi	r28, 0x00	; 0
 1c2:	d0 e0       	ldi	r29, 0x00	; 0
}
 1c4:	ce 01       	movw	r24, r28
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
 1ca:	1f 91       	pop	r17
 1cc:	0f 91       	pop	r16
 1ce:	08 95       	ret

000001d0 <app_start>:
}


void app_start(void){
	while(1){
		ALL_OFF();
 1d0:	0e 94 48 01 	call	0x290	; 0x290 <ALL_OFF>
		State = 1;
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <State+0x1>
 1dc:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <State>
		LED_ON(PORT_B,PIN0);
 1e0:	60 e0       	ldi	r22, 0x00	; 0
 1e2:	82 e4       	ldi	r24, 0x42	; 66
 1e4:	0e 94 83 01 	call	0x306	; 0x306 <LED_ON>
		if(test() == 1){
 1e8:	0e 94 70 00 	call	0xe0	; 0xe0 <test>
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	81 f3       	breq	.-32     	; 0x1d0 <app_start>
			continue;
		}
		TIMER0_delay();
 1f0:	0e 94 bf 02 	call	0x57e	; 0x57e <TIMER0_delay>
		if(test() == 1){
 1f4:	0e 94 70 00 	call	0xe0	; 0xe0 <test>
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	51 f3       	breq	.-44     	; 0x1d0 <app_start>
			continue;
		}
		State = 1;
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <State+0x1>
 204:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <State>
		LED_OFF(PORT_B,PIN0);
 208:	60 e0       	ldi	r22, 0x00	; 0
 20a:	82 e4       	ldi	r24, 0x42	; 66
 20c:	0e 94 87 01 	call	0x30e	; 0x30e <LED_OFF>
		if(test() == 1){
 210:	0e 94 70 00 	call	0xe0	; 0xe0 <test>
 214:	01 97       	sbiw	r24, 0x01	; 1
 216:	e1 f2       	breq	.-72     	; 0x1d0 <app_start>
			continue;
		}
		Car_yellow_led_timer();
 218:	0e 94 61 01 	call	0x2c2	; 0x2c2 <Car_yellow_led_timer>
		if(test() == 1){
 21c:	0e 94 70 00 	call	0xe0	; 0xe0 <test>
 220:	01 97       	sbiw	r24, 0x01	; 1
 222:	b1 f2       	breq	.-84     	; 0x1d0 <app_start>
			continue;
		}
		State = 0;
 224:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <State+0x1>
 228:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <State>
		LED_ON(PORT_B,PIN2);
 22c:	62 e0       	ldi	r22, 0x02	; 2
 22e:	82 e4       	ldi	r24, 0x42	; 66
 230:	0e 94 83 01 	call	0x306	; 0x306 <LED_ON>
		if(test() == 1){
 234:	0e 94 70 00 	call	0xe0	; 0xe0 <test>
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	51 f2       	breq	.-108    	; 0x1d0 <app_start>
			continue;
		}
		TIMER0_delay();
 23c:	0e 94 bf 02 	call	0x57e	; 0x57e <TIMER0_delay>
		if(test() == 1){
 240:	0e 94 70 00 	call	0xe0	; 0xe0 <test>
 244:	01 97       	sbiw	r24, 0x01	; 1
 246:	21 f2       	breq	.-120    	; 0x1d0 <app_start>
			continue;
		}
		State = 1;
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <State+0x1>
 250:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <State>
		LED_OFF(PORT_B,PIN2);
 254:	62 e0       	ldi	r22, 0x02	; 2
 256:	82 e4       	ldi	r24, 0x42	; 66
 258:	0e 94 87 01 	call	0x30e	; 0x30e <LED_OFF>
		if(test() == 1){
 25c:	0e 94 70 00 	call	0xe0	; 0xe0 <test>
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	09 f4       	brne	.+2      	; 0x266 <app_start+0x96>
 264:	b5 cf       	rjmp	.-150    	; 0x1d0 <app_start>
			continue;
		}
		Car_yellow_led_timer();
 266:	0e 94 61 01 	call	0x2c2	; 0x2c2 <Car_yellow_led_timer>
 26a:	b2 cf       	rjmp	.-156    	; 0x1d0 <app_start>

0000026c <__vector_1>:
		}
	}
	return 0;
}

ISR(EXT_INT_0){
 26c:	1f 92       	push	r1
 26e:	0f 92       	push	r0
 270:	0f b6       	in	r0, 0x3f	; 63
 272:	0f 92       	push	r0
 274:	11 24       	eor	r1, r1
	flag = 0;
 276:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__data_start+0x1>
 27a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
 27e:	0f 90       	pop	r0
 280:	0f be       	out	0x3f, r0	; 63
 282:	0f 90       	pop	r0
 284:	1f 90       	pop	r1
 286:	18 95       	reti

00000288 <BUTTON_INIT>:

#include "Buttons.h"


void BUTTON_INIT(uint8_t BPort, uint8_t BPin){
	DIO_init(BPort,BPin,IN);
 288:	40 e0       	ldi	r20, 0x00	; 0
 28a:	0e 94 93 01 	call	0x326	; 0x326 <DIO_init>
 28e:	08 95       	ret

00000290 <ALL_OFF>:
 */ 

#include "Control.h"

void ALL_OFF(){
	LED_OFF(PORT_A,PIN0);
 290:	60 e0       	ldi	r22, 0x00	; 0
 292:	81 e4       	ldi	r24, 0x41	; 65
 294:	0e 94 87 01 	call	0x30e	; 0x30e <LED_OFF>
	LED_OFF(PORT_B,PIN0);
 298:	60 e0       	ldi	r22, 0x00	; 0
 29a:	82 e4       	ldi	r24, 0x42	; 66
 29c:	0e 94 87 01 	call	0x30e	; 0x30e <LED_OFF>
	LED_OFF(PORT_A,PIN1);
 2a0:	61 e0       	ldi	r22, 0x01	; 1
 2a2:	81 e4       	ldi	r24, 0x41	; 65
 2a4:	0e 94 87 01 	call	0x30e	; 0x30e <LED_OFF>
	LED_OFF(PORT_B,PIN1);
 2a8:	61 e0       	ldi	r22, 0x01	; 1
 2aa:	82 e4       	ldi	r24, 0x42	; 66
 2ac:	0e 94 87 01 	call	0x30e	; 0x30e <LED_OFF>
	LED_OFF(PORT_A,PIN2);
 2b0:	62 e0       	ldi	r22, 0x02	; 2
 2b2:	81 e4       	ldi	r24, 0x41	; 65
 2b4:	0e 94 87 01 	call	0x30e	; 0x30e <LED_OFF>
	LED_OFF(PORT_B,PIN2);
 2b8:	62 e0       	ldi	r22, 0x02	; 2
 2ba:	82 e4       	ldi	r24, 0x42	; 66
 2bc:	0e 94 87 01 	call	0x30e	; 0x30e <LED_OFF>
 2c0:	08 95       	ret

000002c2 <Car_yellow_led_timer>:
}

void Car_yellow_led_timer(){
	TIMER_blink_car();
 2c2:	0e 94 13 03 	call	0x626	; 0x626 <TIMER_blink_car>
	State = 1;
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <State+0x1>
 2ce:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <State>
	LED_OFF(PORT_B,PIN1);
 2d2:	61 e0       	ldi	r22, 0x01	; 1
 2d4:	82 e4       	ldi	r24, 0x42	; 66
 2d6:	0e 94 87 01 	call	0x30e	; 0x30e <LED_OFF>
 2da:	08 95       	ret

000002dc <Yellow_led_timer>:
}


void Yellow_led_timer(){
	TIMER_blink();
 2dc:	0e 94 e5 02 	call	0x5ca	; 0x5ca <TIMER_blink>
	LED_OFF(PORT_A,PIN1);
 2e0:	61 e0       	ldi	r22, 0x01	; 1
 2e2:	81 e4       	ldi	r24, 0x41	; 65
 2e4:	0e 94 87 01 	call	0x30e	; 0x30e <LED_OFF>
	State = 1;
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <State+0x1>
 2f0:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <State>
	LED_OFF(PORT_B,PIN1);
 2f4:	61 e0       	ldi	r22, 0x01	; 1
 2f6:	82 e4       	ldi	r24, 0x42	; 66
 2f8:	0e 94 87 01 	call	0x30e	; 0x30e <LED_OFF>
 2fc:	08 95       	ret

000002fe <LED_INIT>:

#include "LEDS.h"


void LED_INIT(uint8_t LPORT, uint8_t LPIN){
	DIO_init(LPORT,LPIN,OUT);
 2fe:	41 e0       	ldi	r20, 0x01	; 1
 300:	0e 94 93 01 	call	0x326	; 0x326 <DIO_init>
 304:	08 95       	ret

00000306 <LED_ON>:
}

void LED_ON(uint8_t LPORT, uint8_t LPIN){
	DIO_write(LPORT,LPIN,HIGH);
 306:	40 e0       	ldi	r20, 0x00	; 0
 308:	0e 94 0d 02 	call	0x41a	; 0x41a <DIO_write>
 30c:	08 95       	ret

0000030e <LED_OFF>:
}

void LED_OFF(uint8_t LPORT, uint8_t LPIN){
	DIO_write(LPORT,LPIN,LOW);
 30e:	41 e0       	ldi	r20, 0x01	; 1
 310:	0e 94 0d 02 	call	0x41a	; 0x41a <DIO_write>
 314:	08 95       	ret

00000316 <LED_TOGGLE>:
}

void LED_TOGGLE(uint8_t LPORT, uint8_t LPIN){
	DIO_toggle(LPORT,LPIN);
 316:	0e 94 85 02 	call	0x50a	; 0x50a <DIO_toggle>
 31a:	08 95       	ret

0000031c <main>:

#define F_CPU 1000000UL

int main(void)
{
	app_init();
 31c:	0e 94 49 00 	call	0x92	; 0x92 <app_init>
	while (1)
	{
		app_start();
 320:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <app_start>
 324:	fd cf       	rjmp	.-6      	; 0x320 <main+0x4>

00000326 <DIO_init>:
 */ 

#include "DIO.h"

void DIO_init(uint8_t portNumber, uint8_t pinNumber, uint8_t direction){
	switch(portNumber){
 326:	82 34       	cpi	r24, 0x42	; 66
 328:	31 f1       	breq	.+76     	; 0x376 <DIO_init+0x50>
 32a:	18 f4       	brcc	.+6      	; 0x332 <DIO_init+0xc>
 32c:	81 34       	cpi	r24, 0x41	; 65
 32e:	39 f0       	breq	.+14     	; 0x33e <DIO_init+0x18>
 330:	08 95       	ret
 332:	83 34       	cpi	r24, 0x43	; 67
 334:	e1 f1       	breq	.+120    	; 0x3ae <DIO_init+0x88>
 336:	84 34       	cpi	r24, 0x44	; 68
 338:	09 f4       	brne	.+2      	; 0x33c <DIO_init+0x16>
 33a:	54 c0       	rjmp	.+168    	; 0x3e4 <DIO_init+0xbe>
 33c:	08 95       	ret
		case PORT_A:
		if(direction == IN){
 33e:	41 11       	cpse	r20, r1
 340:	0c c0       	rjmp	.+24     	; 0x35a <DIO_init+0x34>
			DDRA &= ~(1<<pinNumber);
 342:	2a b3       	in	r18, 0x1a	; 26
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	02 c0       	rjmp	.+4      	; 0x34e <DIO_init+0x28>
 34a:	88 0f       	add	r24, r24
 34c:	99 1f       	adc	r25, r25
 34e:	6a 95       	dec	r22
 350:	e2 f7       	brpl	.-8      	; 0x34a <DIO_init+0x24>
 352:	80 95       	com	r24
 354:	82 23       	and	r24, r18
 356:	8a bb       	out	0x1a, r24	; 26
 358:	08 95       	ret
		}
		else if(direction == OUT)
 35a:	41 30       	cpi	r20, 0x01	; 1
 35c:	09 f0       	breq	.+2      	; 0x360 <DIO_init+0x3a>
 35e:	5c c0       	rjmp	.+184    	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
		{
			DDRA |= (1<<pinNumber);
 360:	2a b3       	in	r18, 0x1a	; 26
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	02 c0       	rjmp	.+4      	; 0x36c <DIO_init+0x46>
 368:	88 0f       	add	r24, r24
 36a:	99 1f       	adc	r25, r25
 36c:	6a 95       	dec	r22
 36e:	e2 f7       	brpl	.-8      	; 0x368 <DIO_init+0x42>
 370:	82 2b       	or	r24, r18
 372:	8a bb       	out	0x1a, r24	; 26
 374:	08 95       	ret
		}
		else{}
		break;
		
		case PORT_B:
		if(direction == IN){
 376:	41 11       	cpse	r20, r1
 378:	0c c0       	rjmp	.+24     	; 0x392 <DIO_init+0x6c>
			DDRB &= ~(1<<pinNumber);
 37a:	27 b3       	in	r18, 0x17	; 23
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	02 c0       	rjmp	.+4      	; 0x386 <DIO_init+0x60>
 382:	88 0f       	add	r24, r24
 384:	99 1f       	adc	r25, r25
 386:	6a 95       	dec	r22
 388:	e2 f7       	brpl	.-8      	; 0x382 <DIO_init+0x5c>
 38a:	80 95       	com	r24
 38c:	82 23       	and	r24, r18
 38e:	87 bb       	out	0x17, r24	; 23
 390:	08 95       	ret
		}
		else if(direction == OUT)
 392:	41 30       	cpi	r20, 0x01	; 1
 394:	09 f0       	breq	.+2      	; 0x398 <DIO_init+0x72>
 396:	40 c0       	rjmp	.+128    	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
		{
			DDRB |= (1<<pinNumber);
 398:	27 b3       	in	r18, 0x17	; 23
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <DIO_init+0x7e>
 3a0:	88 0f       	add	r24, r24
 3a2:	99 1f       	adc	r25, r25
 3a4:	6a 95       	dec	r22
 3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <DIO_init+0x7a>
 3a8:	82 2b       	or	r24, r18
 3aa:	87 bb       	out	0x17, r24	; 23
 3ac:	08 95       	ret
		}
		else{}
		break;
		
		case PORT_C:
		if(direction == IN){
 3ae:	41 11       	cpse	r20, r1
 3b0:	0c c0       	rjmp	.+24     	; 0x3ca <DIO_init+0xa4>
			DDRC &= ~(1<<pinNumber);
 3b2:	24 b3       	in	r18, 0x14	; 20
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	02 c0       	rjmp	.+4      	; 0x3be <DIO_init+0x98>
 3ba:	88 0f       	add	r24, r24
 3bc:	99 1f       	adc	r25, r25
 3be:	6a 95       	dec	r22
 3c0:	e2 f7       	brpl	.-8      	; 0x3ba <DIO_init+0x94>
 3c2:	80 95       	com	r24
 3c4:	82 23       	and	r24, r18
 3c6:	84 bb       	out	0x14, r24	; 20
 3c8:	08 95       	ret
		}
		else if(direction == OUT)
 3ca:	41 30       	cpi	r20, 0x01	; 1
 3cc:	29 f5       	brne	.+74     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
		{
			DDRC |= (1<<pinNumber);
 3ce:	24 b3       	in	r18, 0x14	; 20
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <DIO_init+0xb4>
 3d6:	88 0f       	add	r24, r24
 3d8:	99 1f       	adc	r25, r25
 3da:	6a 95       	dec	r22
 3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <DIO_init+0xb0>
 3de:	82 2b       	or	r24, r18
 3e0:	84 bb       	out	0x14, r24	; 20
 3e2:	08 95       	ret
		}
		else{}
		break;
		
		case PORT_D:
		if(direction == IN){
 3e4:	41 11       	cpse	r20, r1
 3e6:	0c c0       	rjmp	.+24     	; 0x400 <__EEPROM_REGION_LENGTH__>
			DDRD &= ~(1<<pinNumber);
 3e8:	21 b3       	in	r18, 0x11	; 17
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <DIO_init+0xce>
 3f0:	88 0f       	add	r24, r24
 3f2:	99 1f       	adc	r25, r25
 3f4:	6a 95       	dec	r22
 3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <DIO_init+0xca>
 3f8:	80 95       	com	r24
 3fa:	82 23       	and	r24, r18
 3fc:	81 bb       	out	0x11, r24	; 17
 3fe:	08 95       	ret
		}
		else if(direction == OUT)
 400:	41 30       	cpi	r20, 0x01	; 1
 402:	51 f4       	brne	.+20     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
		{
			DDRD |= (1<<pinNumber);
 404:	21 b3       	in	r18, 0x11	; 17
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	02 c0       	rjmp	.+4      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 40c:	88 0f       	add	r24, r24
 40e:	99 1f       	adc	r25, r25
 410:	6a 95       	dec	r22
 412:	e2 f7       	brpl	.-8      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 414:	82 2b       	or	r24, r18
 416:	81 bb       	out	0x11, r24	; 17
 418:	08 95       	ret

0000041a <DIO_write>:
		else{}
		break;
	}
}
void DIO_write(uint8_t portNumber, uint8_t pinNumber, uint8_t value){
	switch(portNumber){
 41a:	82 34       	cpi	r24, 0x42	; 66
 41c:	29 f1       	breq	.+74     	; 0x468 <DIO_write+0x4e>
 41e:	18 f4       	brcc	.+6      	; 0x426 <DIO_write+0xc>
 420:	81 34       	cpi	r24, 0x41	; 65
 422:	39 f0       	breq	.+14     	; 0x432 <DIO_write+0x18>
 424:	08 95       	ret
 426:	83 34       	cpi	r24, 0x43	; 67
 428:	d1 f1       	breq	.+116    	; 0x49e <DIO_write+0x84>
 42a:	84 34       	cpi	r24, 0x44	; 68
 42c:	09 f4       	brne	.+2      	; 0x430 <DIO_write+0x16>
 42e:	52 c0       	rjmp	.+164    	; 0x4d4 <DIO_write+0xba>
 430:	08 95       	ret
		case PORT_A :
		if(value == LOW){
 432:	41 30       	cpi	r20, 0x01	; 1
 434:	61 f4       	brne	.+24     	; 0x44e <DIO_write+0x34>
			PORTA &= ~(1<<pinNumber);
 436:	2b b3       	in	r18, 0x1b	; 27
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	02 c0       	rjmp	.+4      	; 0x442 <DIO_write+0x28>
 43e:	88 0f       	add	r24, r24
 440:	99 1f       	adc	r25, r25
 442:	6a 95       	dec	r22
 444:	e2 f7       	brpl	.-8      	; 0x43e <DIO_write+0x24>
 446:	80 95       	com	r24
 448:	82 23       	and	r24, r18
 44a:	8b bb       	out	0x1b, r24	; 27
 44c:	08 95       	ret
		}
		else if(value == HIGH)
 44e:	41 11       	cpse	r20, r1
 450:	5b c0       	rjmp	.+182    	; 0x508 <DIO_write+0xee>
		{
			PORTA |= (1<<pinNumber);
 452:	2b b3       	in	r18, 0x1b	; 27
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	02 c0       	rjmp	.+4      	; 0x45e <DIO_write+0x44>
 45a:	88 0f       	add	r24, r24
 45c:	99 1f       	adc	r25, r25
 45e:	6a 95       	dec	r22
 460:	e2 f7       	brpl	.-8      	; 0x45a <DIO_write+0x40>
 462:	82 2b       	or	r24, r18
 464:	8b bb       	out	0x1b, r24	; 27
 466:	08 95       	ret
		}
		else{}
		break;
		
		case PORT_B :
		if(value == LOW){
 468:	41 30       	cpi	r20, 0x01	; 1
 46a:	61 f4       	brne	.+24     	; 0x484 <DIO_write+0x6a>
			PORTB &= ~(1<<pinNumber);
 46c:	28 b3       	in	r18, 0x18	; 24
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	02 c0       	rjmp	.+4      	; 0x478 <DIO_write+0x5e>
 474:	88 0f       	add	r24, r24
 476:	99 1f       	adc	r25, r25
 478:	6a 95       	dec	r22
 47a:	e2 f7       	brpl	.-8      	; 0x474 <DIO_write+0x5a>
 47c:	80 95       	com	r24
 47e:	82 23       	and	r24, r18
 480:	88 bb       	out	0x18, r24	; 24
 482:	08 95       	ret
		}
		else if(value == HIGH)
 484:	41 11       	cpse	r20, r1
 486:	40 c0       	rjmp	.+128    	; 0x508 <DIO_write+0xee>
		{
			PORTB |= (1<<pinNumber);
 488:	28 b3       	in	r18, 0x18	; 24
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	02 c0       	rjmp	.+4      	; 0x494 <DIO_write+0x7a>
 490:	88 0f       	add	r24, r24
 492:	99 1f       	adc	r25, r25
 494:	6a 95       	dec	r22
 496:	e2 f7       	brpl	.-8      	; 0x490 <DIO_write+0x76>
 498:	82 2b       	or	r24, r18
 49a:	88 bb       	out	0x18, r24	; 24
 49c:	08 95       	ret
		}
		else{}
		break;
		
		case PORT_C :
		if(value == LOW){
 49e:	41 30       	cpi	r20, 0x01	; 1
 4a0:	61 f4       	brne	.+24     	; 0x4ba <DIO_write+0xa0>
			PORTC &= ~(1<<pinNumber);
 4a2:	25 b3       	in	r18, 0x15	; 21
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	02 c0       	rjmp	.+4      	; 0x4ae <DIO_write+0x94>
 4aa:	88 0f       	add	r24, r24
 4ac:	99 1f       	adc	r25, r25
 4ae:	6a 95       	dec	r22
 4b0:	e2 f7       	brpl	.-8      	; 0x4aa <DIO_write+0x90>
 4b2:	80 95       	com	r24
 4b4:	82 23       	and	r24, r18
 4b6:	85 bb       	out	0x15, r24	; 21
 4b8:	08 95       	ret
		}
		else if(value == HIGH)
 4ba:	41 11       	cpse	r20, r1
 4bc:	25 c0       	rjmp	.+74     	; 0x508 <DIO_write+0xee>
		{
			PORTC |= (1<<pinNumber);
 4be:	25 b3       	in	r18, 0x15	; 21
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	02 c0       	rjmp	.+4      	; 0x4ca <DIO_write+0xb0>
 4c6:	88 0f       	add	r24, r24
 4c8:	99 1f       	adc	r25, r25
 4ca:	6a 95       	dec	r22
 4cc:	e2 f7       	brpl	.-8      	; 0x4c6 <DIO_write+0xac>
 4ce:	82 2b       	or	r24, r18
 4d0:	85 bb       	out	0x15, r24	; 21
 4d2:	08 95       	ret
		}
		else{}
		break;
		
		case PORT_D :
		if(value == LOW){
 4d4:	41 30       	cpi	r20, 0x01	; 1
 4d6:	61 f4       	brne	.+24     	; 0x4f0 <DIO_write+0xd6>
			PORTD &= ~(1<<pinNumber);
 4d8:	22 b3       	in	r18, 0x12	; 18
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	02 c0       	rjmp	.+4      	; 0x4e4 <DIO_write+0xca>
 4e0:	88 0f       	add	r24, r24
 4e2:	99 1f       	adc	r25, r25
 4e4:	6a 95       	dec	r22
 4e6:	e2 f7       	brpl	.-8      	; 0x4e0 <DIO_write+0xc6>
 4e8:	80 95       	com	r24
 4ea:	82 23       	and	r24, r18
 4ec:	82 bb       	out	0x12, r24	; 18
 4ee:	08 95       	ret
		}
		else if(value == HIGH)
 4f0:	41 11       	cpse	r20, r1
 4f2:	0a c0       	rjmp	.+20     	; 0x508 <DIO_write+0xee>
		{
			PORTD |= (1<<pinNumber);
 4f4:	22 b3       	in	r18, 0x12	; 18
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	02 c0       	rjmp	.+4      	; 0x500 <DIO_write+0xe6>
 4fc:	88 0f       	add	r24, r24
 4fe:	99 1f       	adc	r25, r25
 500:	6a 95       	dec	r22
 502:	e2 f7       	brpl	.-8      	; 0x4fc <DIO_write+0xe2>
 504:	82 2b       	or	r24, r18
 506:	82 bb       	out	0x12, r24	; 18
 508:	08 95       	ret

0000050a <DIO_toggle>:
		else{}
		break;	
	}
}
void DIO_toggle(uint8_t portNumber, uint8_t pinNumber){
	switch(portNumber){
 50a:	82 34       	cpi	r24, 0x42	; 66
 50c:	a1 f0       	breq	.+40     	; 0x536 <DIO_toggle+0x2c>
 50e:	18 f4       	brcc	.+6      	; 0x516 <DIO_toggle+0xc>
 510:	81 34       	cpi	r24, 0x41	; 65
 512:	31 f0       	breq	.+12     	; 0x520 <DIO_toggle+0x16>
 514:	08 95       	ret
 516:	83 34       	cpi	r24, 0x43	; 67
 518:	c9 f0       	breq	.+50     	; 0x54c <DIO_toggle+0x42>
 51a:	84 34       	cpi	r24, 0x44	; 68
 51c:	11 f1       	breq	.+68     	; 0x562 <DIO_toggle+0x58>
 51e:	08 95       	ret
		case PORT_A:
		PORTA ^= (1<<pinNumber);
 520:	2b b3       	in	r18, 0x1b	; 27
 522:	81 e0       	ldi	r24, 0x01	; 1
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	02 c0       	rjmp	.+4      	; 0x52c <DIO_toggle+0x22>
 528:	88 0f       	add	r24, r24
 52a:	99 1f       	adc	r25, r25
 52c:	6a 95       	dec	r22
 52e:	e2 f7       	brpl	.-8      	; 0x528 <DIO_toggle+0x1e>
 530:	82 27       	eor	r24, r18
 532:	8b bb       	out	0x1b, r24	; 27
		break;
 534:	08 95       	ret
		
		case PORT_B:
		PORTB ^= (1<<pinNumber);
 536:	28 b3       	in	r18, 0x18	; 24
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	02 c0       	rjmp	.+4      	; 0x542 <DIO_toggle+0x38>
 53e:	88 0f       	add	r24, r24
 540:	99 1f       	adc	r25, r25
 542:	6a 95       	dec	r22
 544:	e2 f7       	brpl	.-8      	; 0x53e <DIO_toggle+0x34>
 546:	82 27       	eor	r24, r18
 548:	88 bb       	out	0x18, r24	; 24
		break;
 54a:	08 95       	ret
		
		case PORT_C:
		PORTC ^= (1<<pinNumber);
 54c:	25 b3       	in	r18, 0x15	; 21
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	02 c0       	rjmp	.+4      	; 0x558 <DIO_toggle+0x4e>
 554:	88 0f       	add	r24, r24
 556:	99 1f       	adc	r25, r25
 558:	6a 95       	dec	r22
 55a:	e2 f7       	brpl	.-8      	; 0x554 <DIO_toggle+0x4a>
 55c:	82 27       	eor	r24, r18
 55e:	85 bb       	out	0x15, r24	; 21
		break;
 560:	08 95       	ret
		
		case PORT_D:
		PORTD ^= (1<<pinNumber);
 562:	22 b3       	in	r18, 0x12	; 18
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	02 c0       	rjmp	.+4      	; 0x56e <DIO_toggle+0x64>
 56a:	88 0f       	add	r24, r24
 56c:	99 1f       	adc	r25, r25
 56e:	6a 95       	dec	r22
 570:	e2 f7       	brpl	.-8      	; 0x56a <DIO_toggle+0x60>
 572:	82 27       	eor	r24, r18
 574:	82 bb       	out	0x12, r24	; 18
 576:	08 95       	ret

00000578 <Timer0_Init>:
#include "Timers.h"
#include "../../ECUAL/Buttons/Buttons.h"
#include "../../ECUAL/Control/Control.h"

void Timer0_Init(){
	TCCR0 = 0x00;
 578:	13 be       	out	0x33, r1	; 51
	TCNT0 = 0x00;
 57a:	12 be       	out	0x32, r1	; 50
 57c:	08 95       	ret

0000057e <TIMER0_delay>:
	
}

void TIMER0_delay(){ 
	TCCR0 |= (1<<0);
 57e:	83 b7       	in	r24, 0x33	; 51
 580:	81 60       	ori	r24, 0x01	; 1
 582:	83 bf       	out	0x33, r24	; 51
	i = 0;
 584:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__data_end+0x1>
 588:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
	while(i < overflows && ((BUTTON_PIN) == 0) ){   
 58c:	0f c0       	rjmp	.+30     	; 0x5ac <TIMER0_delay+0x2e>
		while((TIFR & (1<<0)) == 0 );
 58e:	08 b6       	in	r0, 0x38	; 56
 590:	00 fe       	sbrs	r0, 0
 592:	fd cf       	rjmp	.-6      	; 0x58e <TIMER0_delay+0x10>
		TIFR |= (1<<0);
 594:	88 b7       	in	r24, 0x38	; 56
 596:	81 60       	ori	r24, 0x01	; 1
 598:	88 bf       	out	0x38, r24	; 56
		i++;
 59a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 59e:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 5a2:	01 96       	adiw	r24, 0x01	; 1
 5a4:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
 5a8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
}

void TIMER0_delay(){ 
	TCCR0 |= (1<<0);
	i = 0;
	while(i < overflows && ((BUTTON_PIN) == 0) ){   
 5ac:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 5b0:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 5b4:	8c 34       	cpi	r24, 0x4C	; 76
 5b6:	9c 44       	sbci	r25, 0x4C	; 76
 5b8:	10 f4       	brcc	.+4      	; 0x5be <TIMER0_delay+0x40>
 5ba:	82 9b       	sbis	0x10, 2	; 16
 5bc:	e8 cf       	rjmp	.-48     	; 0x58e <TIMER0_delay+0x10>
		while((TIFR & (1<<0)) == 0 );
		TIFR |= (1<<0);
		i++;
	}
	i = 0;
 5be:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__data_end+0x1>
 5c2:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
			
	TCCR0 = 0x00;
 5c6:	13 be       	out	0x33, r1	; 51
 5c8:	08 95       	ret

000005ca <TIMER_blink>:
}

void TIMER_blink(){
	TCCR0 |= (1<<0);
 5ca:	83 b7       	in	r24, 0x33	; 51
 5cc:	81 60       	ori	r24, 0x01	; 1
 5ce:	83 bf       	out	0x33, r24	; 51
	while(i < overflows){
 5d0:	1d c0       	rjmp	.+58     	; 0x60c <TIMER_blink+0x42>
		while((TIFR & (1<<0)) == 0 );
 5d2:	08 b6       	in	r0, 0x38	; 56
 5d4:	00 fe       	sbrs	r0, 0
 5d6:	fd cf       	rjmp	.-6      	; 0x5d2 <TIMER_blink+0x8>
		TIFR |= (1<<0);
 5d8:	88 b7       	in	r24, 0x38	; 56
 5da:	81 60       	ori	r24, 0x01	; 1
 5dc:	88 bf       	out	0x38, r24	; 56
		i++;
 5de:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 5e2:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 5e6:	01 96       	adiw	r24, 0x01	; 1
 5e8:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
 5ec:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
		if(i % 1953 == 0){
 5f0:	61 ea       	ldi	r22, 0xA1	; 161
 5f2:	77 e0       	ldi	r23, 0x07	; 7
 5f4:	0e 94 3f 03 	call	0x67e	; 0x67e <__udivmodhi4>
 5f8:	89 2b       	or	r24, r25
 5fa:	41 f4       	brne	.+16     	; 0x60c <TIMER_blink+0x42>
			LED_TOGGLE(PORT_A,PIN1);
 5fc:	61 e0       	ldi	r22, 0x01	; 1
 5fe:	81 e4       	ldi	r24, 0x41	; 65
 600:	0e 94 8b 01 	call	0x316	; 0x316 <LED_TOGGLE>
			LED_TOGGLE(PORT_B,PIN1);
 604:	61 e0       	ldi	r22, 0x01	; 1
 606:	82 e4       	ldi	r24, 0x42	; 66
 608:	0e 94 8b 01 	call	0x316	; 0x316 <LED_TOGGLE>
	TCCR0 = 0x00;
}

void TIMER_blink(){
	TCCR0 |= (1<<0);
	while(i < overflows){
 60c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 610:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 614:	8c 34       	cpi	r24, 0x4C	; 76
 616:	9c 44       	sbci	r25, 0x4C	; 76
 618:	e0 f2       	brcs	.-72     	; 0x5d2 <TIMER_blink+0x8>
		if(i % 1953 == 0){
			LED_TOGGLE(PORT_A,PIN1);
			LED_TOGGLE(PORT_B,PIN1);
		}
	}
	i = 0;
 61a:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__data_end+0x1>
 61e:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
	TCCR0 = 0x00;
 622:	13 be       	out	0x33, r1	; 51
 624:	08 95       	ret

00000626 <TIMER_blink_car>:
}

void TIMER_blink_car(){
	TCCR0 |= (1<<0);
 626:	83 b7       	in	r24, 0x33	; 51
 628:	81 60       	ori	r24, 0x01	; 1
 62a:	83 bf       	out	0x33, r24	; 51
	while(i < overflows  && ((BUTTON_PIN) == 0) ){ 
 62c:	19 c0       	rjmp	.+50     	; 0x660 <TIMER_blink_car+0x3a>
		while((TIFR & (1<<0)) == 0 );
 62e:	08 b6       	in	r0, 0x38	; 56
 630:	00 fe       	sbrs	r0, 0
 632:	fd cf       	rjmp	.-6      	; 0x62e <TIMER_blink_car+0x8>
		TIFR |= (1<<0);
 634:	88 b7       	in	r24, 0x38	; 56
 636:	81 60       	ori	r24, 0x01	; 1
 638:	88 bf       	out	0x38, r24	; 56
		i++;
 63a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 63e:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 642:	01 96       	adiw	r24, 0x01	; 1
 644:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
 648:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
		if(i % 1953 == 0){
 64c:	61 ea       	ldi	r22, 0xA1	; 161
 64e:	77 e0       	ldi	r23, 0x07	; 7
 650:	0e 94 3f 03 	call	0x67e	; 0x67e <__udivmodhi4>
 654:	89 2b       	or	r24, r25
 656:	21 f4       	brne	.+8      	; 0x660 <TIMER_blink_car+0x3a>
				LED_TOGGLE(PORT_B,PIN1);
 658:	61 e0       	ldi	r22, 0x01	; 1
 65a:	82 e4       	ldi	r24, 0x42	; 66
 65c:	0e 94 8b 01 	call	0x316	; 0x316 <LED_TOGGLE>
	TCCR0 = 0x00;
}

void TIMER_blink_car(){
	TCCR0 |= (1<<0);
	while(i < overflows  && ((BUTTON_PIN) == 0) ){ 
 660:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 664:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 668:	8c 34       	cpi	r24, 0x4C	; 76
 66a:	9c 44       	sbci	r25, 0x4C	; 76
 66c:	10 f4       	brcc	.+4      	; 0x672 <TIMER_blink_car+0x4c>
 66e:	82 9b       	sbis	0x10, 2	; 16
 670:	de cf       	rjmp	.-68     	; 0x62e <TIMER_blink_car+0x8>
		i++;
		if(i % 1953 == 0){
				LED_TOGGLE(PORT_B,PIN1);
		}
	}
	i = 0;
 672:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__data_end+0x1>
 676:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
	TCCR0 = 0x00;
 67a:	13 be       	out	0x33, r1	; 51
 67c:	08 95       	ret

0000067e <__udivmodhi4>:
 67e:	aa 1b       	sub	r26, r26
 680:	bb 1b       	sub	r27, r27
 682:	51 e1       	ldi	r21, 0x11	; 17
 684:	07 c0       	rjmp	.+14     	; 0x694 <__udivmodhi4_ep>

00000686 <__udivmodhi4_loop>:
 686:	aa 1f       	adc	r26, r26
 688:	bb 1f       	adc	r27, r27
 68a:	a6 17       	cp	r26, r22
 68c:	b7 07       	cpc	r27, r23
 68e:	10 f0       	brcs	.+4      	; 0x694 <__udivmodhi4_ep>
 690:	a6 1b       	sub	r26, r22
 692:	b7 0b       	sbc	r27, r23

00000694 <__udivmodhi4_ep>:
 694:	88 1f       	adc	r24, r24
 696:	99 1f       	adc	r25, r25
 698:	5a 95       	dec	r21
 69a:	a9 f7       	brne	.-22     	; 0x686 <__udivmodhi4_loop>
 69c:	80 95       	com	r24
 69e:	90 95       	com	r25
 6a0:	bc 01       	movw	r22, r24
 6a2:	cd 01       	movw	r24, r26
 6a4:	08 95       	ret

000006a6 <_exit>:
 6a6:	f8 94       	cli

000006a8 <__stop_program>:
 6a8:	ff cf       	rjmp	.-2      	; 0x6a8 <__stop_program>
