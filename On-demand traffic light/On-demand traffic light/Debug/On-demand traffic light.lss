
On-demand traffic light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000006d2  00000766  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800062  00800062  00000768  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000768  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000798  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  000007d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000108b  00000000  00000000  0000092c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000090e  00000000  00000000  000019b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a92  00000000  00000000  000022c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000020c  00000000  00000000  00002d58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f1  00000000  00000000  00002f64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000043a  00000000  00000000  00003455  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  0000388f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ed       	ldi	r30, 0xD2	; 210
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 86 01 	call	0x30c	; 0x30c <main>
  8a:	0c 94 67 03 	jmp	0x6ce	; 0x6ce <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <app_init>:
int flag = 1;


int app_init(void){
	
	BUTTON_INIT(BUTTON_PORT,BUTTON_PIN);
  92:	60 b3       	in	r22, 0x10	; 16
  94:	64 70       	andi	r22, 0x04	; 4
  96:	84 e4       	ldi	r24, 0x44	; 68
  98:	0e 94 3c 01 	call	0x278	; 0x278 <BUTTON_INIT>

	LED_INIT(PORT_B,PIN0);
  9c:	60 e0       	ldi	r22, 0x00	; 0
  9e:	82 e4       	ldi	r24, 0x42	; 66
  a0:	0e 94 77 01 	call	0x2ee	; 0x2ee <LED_INIT>
	LED_INIT(PORT_B,PIN1);
  a4:	61 e0       	ldi	r22, 0x01	; 1
  a6:	82 e4       	ldi	r24, 0x42	; 66
  a8:	0e 94 77 01 	call	0x2ee	; 0x2ee <LED_INIT>
	LED_INIT(PORT_B,PIN2);
  ac:	62 e0       	ldi	r22, 0x02	; 2
  ae:	82 e4       	ldi	r24, 0x42	; 66
  b0:	0e 94 77 01 	call	0x2ee	; 0x2ee <LED_INIT>
	
	LED_INIT(PORT_A,PIN0);
  b4:	60 e0       	ldi	r22, 0x00	; 0
  b6:	81 e4       	ldi	r24, 0x41	; 65
  b8:	0e 94 77 01 	call	0x2ee	; 0x2ee <LED_INIT>
	LED_INIT(PORT_A,PIN1);
  bc:	61 e0       	ldi	r22, 0x01	; 1
  be:	81 e4       	ldi	r24, 0x41	; 65
  c0:	0e 94 77 01 	call	0x2ee	; 0x2ee <LED_INIT>
	LED_INIT(PORT_A,PIN2);
  c4:	62 e0       	ldi	r22, 0x02	; 2
  c6:	81 e4       	ldi	r24, 0x41	; 65
  c8:	0e 94 77 01 	call	0x2ee	; 0x2ee <LED_INIT>
	
	Timer0_Init();
  cc:	0e 94 b4 02 	call	0x568	; 0x568 <Timer0_Init>
	sei();
  d0:	78 94       	sei
	RISING_EDGE_SETUP();
  d2:	85 b7       	in	r24, 0x35	; 53
  d4:	83 60       	ori	r24, 0x03	; 3
  d6:	85 bf       	out	0x35, r24	; 53
	SETUP_INT0();
  d8:	8b b7       	in	r24, 0x3b	; 59
  da:	80 64       	ori	r24, 0x40	; 64
  dc:	8b bf       	out	0x3b, r24	; 59
	return 3;
}
  de:	83 e0       	ldi	r24, 0x03	; 3
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	08 95       	ret

000000e4 <test>:
		Car_yellow_led_timer();
	}
	return 2;
}

int test(){
  e4:	0f 93       	push	r16
  e6:	1f 93       	push	r17
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
	if(flag == 0){
  ec:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  f0:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  f4:	89 2b       	or	r24, r25
  f6:	09 f0       	breq	.+2      	; 0xfa <test+0x16>
  f8:	5b c0       	rjmp	.+182    	; 0x1b0 <test+0xcc>
		if(State == 1){
  fa:	c0 91 64 00 	lds	r28, 0x0064	; 0x800064 <State>
  fe:	d0 91 65 00 	lds	r29, 0x0065	; 0x800065 <State+0x1>
 102:	c1 30       	cpi	r28, 0x01	; 1
 104:	d1 05       	cpc	r29, r1
 106:	79 f5       	brne	.+94     	; 0x166 <test+0x82>
			
			ALL_OFF();
 108:	0e 94 40 01 	call	0x280	; 0x280 <ALL_OFF>
			LED_ON(PORT_B,PIN2);
 10c:	62 e0       	ldi	r22, 0x02	; 2
 10e:	82 e4       	ldi	r24, 0x42	; 66
 110:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LED_ON>
			Yellow_led_timer();
 114:	0e 94 66 01 	call	0x2cc	; 0x2cc <Yellow_led_timer>
			LED_OFF(PORT_B,PIN2);
 118:	62 e0       	ldi	r22, 0x02	; 2
 11a:	82 e4       	ldi	r24, 0x42	; 66
 11c:	0e 94 7f 01 	call	0x2fe	; 0x2fe <LED_OFF>
			
			LED_ON(PORT_B,PIN0);
 120:	60 e0       	ldi	r22, 0x00	; 0
 122:	82 e4       	ldi	r24, 0x42	; 66
 124:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LED_ON>
			State = 0;
 128:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <State+0x1>
 12c:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <State>
			LED_ON(PORT_A,PIN2);
 130:	62 e0       	ldi	r22, 0x02	; 2
 132:	81 e4       	ldi	r24, 0x41	; 65
 134:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LED_ON>
			TIMER0_delay();
 138:	0e 94 b7 02 	call	0x56e	; 0x56e <TIMER0_delay>
			LED_OFF(PORT_B,PIN0);
 13c:	60 e0       	ldi	r22, 0x00	; 0
 13e:	82 e4       	ldi	r24, 0x42	; 66
 140:	0e 94 7f 01 	call	0x2fe	; 0x2fe <LED_OFF>
			State = 1;
 144:	01 e0       	ldi	r16, 0x01	; 1
 146:	10 e0       	ldi	r17, 0x00	; 0
 148:	10 93 65 00 	sts	0x0065, r17	; 0x800065 <State+0x1>
 14c:	00 93 64 00 	sts	0x0064, r16	; 0x800064 <State>
			LED_OFF(PORT_A,PIN2);
 150:	62 e0       	ldi	r22, 0x02	; 2
 152:	81 e4       	ldi	r24, 0x41	; 65
 154:	0e 94 7f 01 	call	0x2fe	; 0x2fe <LED_OFF>
			Yellow_led_timer();
 158:	0e 94 66 01 	call	0x2cc	; 0x2cc <Yellow_led_timer>
			flag = 1;
 15c:	10 93 61 00 	sts	0x0061, r17	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 160:	00 93 60 00 	sts	0x0060, r16	; 0x800060 <__DATA_REGION_ORIGIN__>
			return 1;
 164:	27 c0       	rjmp	.+78     	; 0x1b4 <test+0xd0>
		}
		else{
			ALL_OFF();
 166:	0e 94 40 01 	call	0x280	; 0x280 <ALL_OFF>
			
			State = 0;
 16a:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <State+0x1>
 16e:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <State>
			LED_ON(PORT_A,PIN2); //car red
 172:	62 e0       	ldi	r22, 0x02	; 2
 174:	81 e4       	ldi	r24, 0x41	; 65
 176:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LED_ON>
			LED_ON(PORT_B,PIN0); //ped green
 17a:	60 e0       	ldi	r22, 0x00	; 0
 17c:	82 e4       	ldi	r24, 0x42	; 66
 17e:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LED_ON>
			TIMER0_delay();
 182:	0e 94 b7 02 	call	0x56e	; 0x56e <TIMER0_delay>
			TIMER0_delay2();
 186:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <TIMER0_delay2>
			LED_OFF(PORT_A,PIN2);
 18a:	62 e0       	ldi	r22, 0x02	; 2
 18c:	81 e4       	ldi	r24, 0x41	; 65
 18e:	0e 94 7f 01 	call	0x2fe	; 0x2fe <LED_OFF>
			LED_OFF(PORT_B,PIN0);
 192:	60 e0       	ldi	r22, 0x00	; 0
 194:	82 e4       	ldi	r24, 0x42	; 66
 196:	0e 94 7f 01 	call	0x2fe	; 0x2fe <LED_OFF>
			Yellow_led_timer();
 19a:	0e 94 66 01 	call	0x2cc	; 0x2cc <Yellow_led_timer>
			flag = 1;
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			return 1;
 1aa:	c1 e0       	ldi	r28, 0x01	; 1
 1ac:	d0 e0       	ldi	r29, 0x00	; 0
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <test+0xd0>
		}
	}
	return 0;
 1b0:	c0 e0       	ldi	r28, 0x00	; 0
 1b2:	d0 e0       	ldi	r29, 0x00	; 0
}
 1b4:	ce 01       	movw	r24, r28
 1b6:	df 91       	pop	r29
 1b8:	cf 91       	pop	r28
 1ba:	1f 91       	pop	r17
 1bc:	0f 91       	pop	r16
 1be:	08 95       	ret

000001c0 <app_start>:
}


int app_start(void){
	while(1){
		ALL_OFF();
 1c0:	0e 94 40 01 	call	0x280	; 0x280 <ALL_OFF>
		State = 1;
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <State+0x1>
 1cc:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <State>
		LED_ON(PORT_A,PIN0);
 1d0:	60 e0       	ldi	r22, 0x00	; 0
 1d2:	81 e4       	ldi	r24, 0x41	; 65
 1d4:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LED_ON>
		if(test() == 1){
 1d8:	0e 94 72 00 	call	0xe4	; 0xe4 <test>
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	81 f3       	breq	.-32     	; 0x1c0 <app_start>
			continue;
		}
		TIMER0_delay();
 1e0:	0e 94 b7 02 	call	0x56e	; 0x56e <TIMER0_delay>
		if(test() == 1){
 1e4:	0e 94 72 00 	call	0xe4	; 0xe4 <test>
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	51 f3       	breq	.-44     	; 0x1c0 <app_start>
			continue;
		}
		State = 1;
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <State+0x1>
 1f4:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <State>
		LED_OFF(PORT_A,PIN0);
 1f8:	60 e0       	ldi	r22, 0x00	; 0
 1fa:	81 e4       	ldi	r24, 0x41	; 65
 1fc:	0e 94 7f 01 	call	0x2fe	; 0x2fe <LED_OFF>
		if(test() == 1){
 200:	0e 94 72 00 	call	0xe4	; 0xe4 <test>
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	e1 f2       	breq	.-72     	; 0x1c0 <app_start>
			continue;
		}
		Car_yellow_led_timer();
 208:	0e 94 59 01 	call	0x2b2	; 0x2b2 <Car_yellow_led_timer>
		if(test() == 1){
 20c:	0e 94 72 00 	call	0xe4	; 0xe4 <test>
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	b1 f2       	breq	.-84     	; 0x1c0 <app_start>
			continue;
		}
		State = 0;
 214:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <State+0x1>
 218:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <State>
		LED_ON(PORT_A,PIN2);
 21c:	62 e0       	ldi	r22, 0x02	; 2
 21e:	81 e4       	ldi	r24, 0x41	; 65
 220:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LED_ON>
		if(test() == 1){
 224:	0e 94 72 00 	call	0xe4	; 0xe4 <test>
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	51 f2       	breq	.-108    	; 0x1c0 <app_start>
			continue;
		}
		TIMER0_delay();
 22c:	0e 94 b7 02 	call	0x56e	; 0x56e <TIMER0_delay>
		if(test() == 1){
 230:	0e 94 72 00 	call	0xe4	; 0xe4 <test>
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	21 f2       	breq	.-120    	; 0x1c0 <app_start>
			continue;
		}
		State = 1;
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <State+0x1>
 240:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <State>
		LED_OFF(PORT_A,PIN2);
 244:	62 e0       	ldi	r22, 0x02	; 2
 246:	81 e4       	ldi	r24, 0x41	; 65
 248:	0e 94 7f 01 	call	0x2fe	; 0x2fe <LED_OFF>
		if(test() == 1){
 24c:	0e 94 72 00 	call	0xe4	; 0xe4 <test>
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	09 f4       	brne	.+2      	; 0x256 <app_start+0x96>
 254:	b5 cf       	rjmp	.-150    	; 0x1c0 <app_start>
			continue;
		}
		Car_yellow_led_timer();
 256:	0e 94 59 01 	call	0x2b2	; 0x2b2 <Car_yellow_led_timer>
 25a:	b2 cf       	rjmp	.-156    	; 0x1c0 <app_start>

0000025c <__vector_1>:
		}
	}
	return 0;
}

ISR(EXT_INT_0){
 25c:	1f 92       	push	r1
 25e:	0f 92       	push	r0
 260:	0f b6       	in	r0, 0x3f	; 63
 262:	0f 92       	push	r0
 264:	11 24       	eor	r1, r1
	flag = 0;
 266:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 26a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 26e:	0f 90       	pop	r0
 270:	0f be       	out	0x3f, r0	; 63
 272:	0f 90       	pop	r0
 274:	1f 90       	pop	r1
 276:	18 95       	reti

00000278 <BUTTON_INIT>:
 278:	40 e0       	ldi	r20, 0x00	; 0
 27a:	0e 94 8b 01 	call	0x316	; 0x316 <DIO_init>
 27e:	08 95       	ret

00000280 <ALL_OFF>:
 280:	60 e0       	ldi	r22, 0x00	; 0
 282:	82 e4       	ldi	r24, 0x42	; 66
 284:	0e 94 7f 01 	call	0x2fe	; 0x2fe <LED_OFF>
 288:	60 e0       	ldi	r22, 0x00	; 0
 28a:	81 e4       	ldi	r24, 0x41	; 65
 28c:	0e 94 7f 01 	call	0x2fe	; 0x2fe <LED_OFF>
 290:	61 e0       	ldi	r22, 0x01	; 1
 292:	82 e4       	ldi	r24, 0x42	; 66
 294:	0e 94 7f 01 	call	0x2fe	; 0x2fe <LED_OFF>
 298:	61 e0       	ldi	r22, 0x01	; 1
 29a:	81 e4       	ldi	r24, 0x41	; 65
 29c:	0e 94 7f 01 	call	0x2fe	; 0x2fe <LED_OFF>
 2a0:	62 e0       	ldi	r22, 0x02	; 2
 2a2:	82 e4       	ldi	r24, 0x42	; 66
 2a4:	0e 94 7f 01 	call	0x2fe	; 0x2fe <LED_OFF>
 2a8:	62 e0       	ldi	r22, 0x02	; 2
 2aa:	81 e4       	ldi	r24, 0x41	; 65
 2ac:	0e 94 7f 01 	call	0x2fe	; 0x2fe <LED_OFF>
 2b0:	08 95       	ret

000002b2 <Car_yellow_led_timer>:
 2b2:	0e 94 27 03 	call	0x64e	; 0x64e <TIMER_blink_car>
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <State+0x1>
 2be:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <State>
 2c2:	61 e0       	ldi	r22, 0x01	; 1
 2c4:	81 e4       	ldi	r24, 0x41	; 65
 2c6:	0e 94 7f 01 	call	0x2fe	; 0x2fe <LED_OFF>
 2ca:	08 95       	ret

000002cc <Yellow_led_timer>:
 2cc:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <TIMER_blink>
 2d0:	61 e0       	ldi	r22, 0x01	; 1
 2d2:	82 e4       	ldi	r24, 0x42	; 66
 2d4:	0e 94 7f 01 	call	0x2fe	; 0x2fe <LED_OFF>
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <State+0x1>
 2e0:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <State>
 2e4:	61 e0       	ldi	r22, 0x01	; 1
 2e6:	81 e4       	ldi	r24, 0x41	; 65
 2e8:	0e 94 7f 01 	call	0x2fe	; 0x2fe <LED_OFF>
 2ec:	08 95       	ret

000002ee <LED_INIT>:
 2ee:	41 e0       	ldi	r20, 0x01	; 1
 2f0:	0e 94 8b 01 	call	0x316	; 0x316 <DIO_init>
 2f4:	08 95       	ret

000002f6 <LED_ON>:
 2f6:	40 e0       	ldi	r20, 0x00	; 0
 2f8:	0e 94 05 02 	call	0x40a	; 0x40a <DIO_write>
 2fc:	08 95       	ret

000002fe <LED_OFF>:
 2fe:	41 e0       	ldi	r20, 0x01	; 1
 300:	0e 94 05 02 	call	0x40a	; 0x40a <DIO_write>
 304:	08 95       	ret

00000306 <LED_TOGGLE>:
 306:	0e 94 7d 02 	call	0x4fa	; 0x4fa <DIO_toggle>
 30a:	08 95       	ret

0000030c <main>:
#include "Application/Application.h"
#define F_CPU 1000000UL

int main(void)
{
	app_init();
 30c:	0e 94 49 00 	call	0x92	; 0x92 <app_init>
	while (1)
	{
		app_start();
 310:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <app_start>
 314:	fd cf       	rjmp	.-6      	; 0x310 <main+0x4>

00000316 <DIO_init>:
 */ 

#include "DIO.h"

void DIO_init(uint8_t portNumber, uint8_t pinNumber, uint8_t direction){
	switch(portNumber){
 316:	82 34       	cpi	r24, 0x42	; 66
 318:	31 f1       	breq	.+76     	; 0x366 <DIO_init+0x50>
 31a:	18 f4       	brcc	.+6      	; 0x322 <DIO_init+0xc>
 31c:	81 34       	cpi	r24, 0x41	; 65
 31e:	39 f0       	breq	.+14     	; 0x32e <DIO_init+0x18>
 320:	08 95       	ret
 322:	83 34       	cpi	r24, 0x43	; 67
 324:	e1 f1       	breq	.+120    	; 0x39e <DIO_init+0x88>
 326:	84 34       	cpi	r24, 0x44	; 68
 328:	09 f4       	brne	.+2      	; 0x32c <DIO_init+0x16>
 32a:	54 c0       	rjmp	.+168    	; 0x3d4 <DIO_init+0xbe>
 32c:	08 95       	ret
		case PORT_A:
		if(direction == IN){
 32e:	41 11       	cpse	r20, r1
 330:	0c c0       	rjmp	.+24     	; 0x34a <DIO_init+0x34>
			DDRA &= ~(1<<pinNumber);
 332:	2a b3       	in	r18, 0x1a	; 26
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	02 c0       	rjmp	.+4      	; 0x33e <DIO_init+0x28>
 33a:	88 0f       	add	r24, r24
 33c:	99 1f       	adc	r25, r25
 33e:	6a 95       	dec	r22
 340:	e2 f7       	brpl	.-8      	; 0x33a <DIO_init+0x24>
 342:	80 95       	com	r24
 344:	82 23       	and	r24, r18
 346:	8a bb       	out	0x1a, r24	; 26
 348:	08 95       	ret
		}
		else if(direction == OUT)
 34a:	41 30       	cpi	r20, 0x01	; 1
 34c:	09 f0       	breq	.+2      	; 0x350 <DIO_init+0x3a>
 34e:	5c c0       	rjmp	.+184    	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
		{
			DDRA |= (1<<pinNumber);
 350:	2a b3       	in	r18, 0x1a	; 26
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	02 c0       	rjmp	.+4      	; 0x35c <DIO_init+0x46>
 358:	88 0f       	add	r24, r24
 35a:	99 1f       	adc	r25, r25
 35c:	6a 95       	dec	r22
 35e:	e2 f7       	brpl	.-8      	; 0x358 <DIO_init+0x42>
 360:	82 2b       	or	r24, r18
 362:	8a bb       	out	0x1a, r24	; 26
 364:	08 95       	ret
		}
		else{}
		break;
		
		case PORT_B:
		if(direction == IN){
 366:	41 11       	cpse	r20, r1
 368:	0c c0       	rjmp	.+24     	; 0x382 <DIO_init+0x6c>
			DDRB &= ~(1<<pinNumber);
 36a:	27 b3       	in	r18, 0x17	; 23
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	02 c0       	rjmp	.+4      	; 0x376 <DIO_init+0x60>
 372:	88 0f       	add	r24, r24
 374:	99 1f       	adc	r25, r25
 376:	6a 95       	dec	r22
 378:	e2 f7       	brpl	.-8      	; 0x372 <DIO_init+0x5c>
 37a:	80 95       	com	r24
 37c:	82 23       	and	r24, r18
 37e:	87 bb       	out	0x17, r24	; 23
 380:	08 95       	ret
		}
		else if(direction == OUT)
 382:	41 30       	cpi	r20, 0x01	; 1
 384:	09 f0       	breq	.+2      	; 0x388 <DIO_init+0x72>
 386:	40 c0       	rjmp	.+128    	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
		{
			DDRB |= (1<<pinNumber);
 388:	27 b3       	in	r18, 0x17	; 23
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	02 c0       	rjmp	.+4      	; 0x394 <DIO_init+0x7e>
 390:	88 0f       	add	r24, r24
 392:	99 1f       	adc	r25, r25
 394:	6a 95       	dec	r22
 396:	e2 f7       	brpl	.-8      	; 0x390 <DIO_init+0x7a>
 398:	82 2b       	or	r24, r18
 39a:	87 bb       	out	0x17, r24	; 23
 39c:	08 95       	ret
		}
		else{}
		break;
		
		case PORT_C:
		if(direction == IN){
 39e:	41 11       	cpse	r20, r1
 3a0:	0c c0       	rjmp	.+24     	; 0x3ba <DIO_init+0xa4>
			DDRC &= ~(1<<pinNumber);
 3a2:	24 b3       	in	r18, 0x14	; 20
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <DIO_init+0x98>
 3aa:	88 0f       	add	r24, r24
 3ac:	99 1f       	adc	r25, r25
 3ae:	6a 95       	dec	r22
 3b0:	e2 f7       	brpl	.-8      	; 0x3aa <DIO_init+0x94>
 3b2:	80 95       	com	r24
 3b4:	82 23       	and	r24, r18
 3b6:	84 bb       	out	0x14, r24	; 20
 3b8:	08 95       	ret
		}
		else if(direction == OUT)
 3ba:	41 30       	cpi	r20, 0x01	; 1
 3bc:	29 f5       	brne	.+74     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
		{
			DDRC |= (1<<pinNumber);
 3be:	24 b3       	in	r18, 0x14	; 20
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <DIO_init+0xb4>
 3c6:	88 0f       	add	r24, r24
 3c8:	99 1f       	adc	r25, r25
 3ca:	6a 95       	dec	r22
 3cc:	e2 f7       	brpl	.-8      	; 0x3c6 <DIO_init+0xb0>
 3ce:	82 2b       	or	r24, r18
 3d0:	84 bb       	out	0x14, r24	; 20
 3d2:	08 95       	ret
		}
		else{}
		break;
		
		case PORT_D:
		if(direction == IN){
 3d4:	41 11       	cpse	r20, r1
 3d6:	0c c0       	rjmp	.+24     	; 0x3f0 <DIO_init+0xda>
			DDRD &= ~(1<<pinNumber);
 3d8:	21 b3       	in	r18, 0x11	; 17
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	02 c0       	rjmp	.+4      	; 0x3e4 <DIO_init+0xce>
 3e0:	88 0f       	add	r24, r24
 3e2:	99 1f       	adc	r25, r25
 3e4:	6a 95       	dec	r22
 3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <DIO_init+0xca>
 3e8:	80 95       	com	r24
 3ea:	82 23       	and	r24, r18
 3ec:	81 bb       	out	0x11, r24	; 17
 3ee:	08 95       	ret
		}
		else if(direction == OUT)
 3f0:	41 30       	cpi	r20, 0x01	; 1
 3f2:	51 f4       	brne	.+20     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
		{
			DDRD |= (1<<pinNumber);
 3f4:	21 b3       	in	r18, 0x11	; 17
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <__EEPROM_REGION_LENGTH__>
 3fc:	88 0f       	add	r24, r24
 3fe:	99 1f       	adc	r25, r25
 400:	6a 95       	dec	r22
 402:	e2 f7       	brpl	.-8      	; 0x3fc <DIO_init+0xe6>
 404:	82 2b       	or	r24, r18
 406:	81 bb       	out	0x11, r24	; 17
 408:	08 95       	ret

0000040a <DIO_write>:
		else{}
		break;
	}
}
void DIO_write(uint8_t portNumber, uint8_t pinNumber, uint8_t value){
	switch(portNumber){
 40a:	82 34       	cpi	r24, 0x42	; 66
 40c:	29 f1       	breq	.+74     	; 0x458 <DIO_write+0x4e>
 40e:	18 f4       	brcc	.+6      	; 0x416 <DIO_write+0xc>
 410:	81 34       	cpi	r24, 0x41	; 65
 412:	39 f0       	breq	.+14     	; 0x422 <DIO_write+0x18>
 414:	08 95       	ret
 416:	83 34       	cpi	r24, 0x43	; 67
 418:	d1 f1       	breq	.+116    	; 0x48e <DIO_write+0x84>
 41a:	84 34       	cpi	r24, 0x44	; 68
 41c:	09 f4       	brne	.+2      	; 0x420 <DIO_write+0x16>
 41e:	52 c0       	rjmp	.+164    	; 0x4c4 <DIO_write+0xba>
 420:	08 95       	ret
		case PORT_A :
		if(value == LOW){
 422:	41 30       	cpi	r20, 0x01	; 1
 424:	61 f4       	brne	.+24     	; 0x43e <DIO_write+0x34>
			PORTA &= ~(1<<pinNumber);
 426:	2b b3       	in	r18, 0x1b	; 27
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	02 c0       	rjmp	.+4      	; 0x432 <DIO_write+0x28>
 42e:	88 0f       	add	r24, r24
 430:	99 1f       	adc	r25, r25
 432:	6a 95       	dec	r22
 434:	e2 f7       	brpl	.-8      	; 0x42e <DIO_write+0x24>
 436:	80 95       	com	r24
 438:	82 23       	and	r24, r18
 43a:	8b bb       	out	0x1b, r24	; 27
 43c:	08 95       	ret
		}
		else if(value == HIGH)
 43e:	41 11       	cpse	r20, r1
 440:	5b c0       	rjmp	.+182    	; 0x4f8 <DIO_write+0xee>
		{
			PORTA |= (1<<pinNumber);
 442:	2b b3       	in	r18, 0x1b	; 27
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	02 c0       	rjmp	.+4      	; 0x44e <DIO_write+0x44>
 44a:	88 0f       	add	r24, r24
 44c:	99 1f       	adc	r25, r25
 44e:	6a 95       	dec	r22
 450:	e2 f7       	brpl	.-8      	; 0x44a <DIO_write+0x40>
 452:	82 2b       	or	r24, r18
 454:	8b bb       	out	0x1b, r24	; 27
 456:	08 95       	ret
		}
		else{}
		break;
		
		case PORT_B :
		if(value == LOW){
 458:	41 30       	cpi	r20, 0x01	; 1
 45a:	61 f4       	brne	.+24     	; 0x474 <DIO_write+0x6a>
			PORTB &= ~(1<<pinNumber);
 45c:	28 b3       	in	r18, 0x18	; 24
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	02 c0       	rjmp	.+4      	; 0x468 <DIO_write+0x5e>
 464:	88 0f       	add	r24, r24
 466:	99 1f       	adc	r25, r25
 468:	6a 95       	dec	r22
 46a:	e2 f7       	brpl	.-8      	; 0x464 <DIO_write+0x5a>
 46c:	80 95       	com	r24
 46e:	82 23       	and	r24, r18
 470:	88 bb       	out	0x18, r24	; 24
 472:	08 95       	ret
		}
		else if(value == HIGH)
 474:	41 11       	cpse	r20, r1
 476:	40 c0       	rjmp	.+128    	; 0x4f8 <DIO_write+0xee>
		{
			PORTB |= (1<<pinNumber);
 478:	28 b3       	in	r18, 0x18	; 24
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	02 c0       	rjmp	.+4      	; 0x484 <DIO_write+0x7a>
 480:	88 0f       	add	r24, r24
 482:	99 1f       	adc	r25, r25
 484:	6a 95       	dec	r22
 486:	e2 f7       	brpl	.-8      	; 0x480 <DIO_write+0x76>
 488:	82 2b       	or	r24, r18
 48a:	88 bb       	out	0x18, r24	; 24
 48c:	08 95       	ret
		}
		else{}
		break;
		
		case PORT_C :
		if(value == LOW){
 48e:	41 30       	cpi	r20, 0x01	; 1
 490:	61 f4       	brne	.+24     	; 0x4aa <DIO_write+0xa0>
			PORTC &= ~(1<<pinNumber);
 492:	25 b3       	in	r18, 0x15	; 21
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	02 c0       	rjmp	.+4      	; 0x49e <DIO_write+0x94>
 49a:	88 0f       	add	r24, r24
 49c:	99 1f       	adc	r25, r25
 49e:	6a 95       	dec	r22
 4a0:	e2 f7       	brpl	.-8      	; 0x49a <DIO_write+0x90>
 4a2:	80 95       	com	r24
 4a4:	82 23       	and	r24, r18
 4a6:	85 bb       	out	0x15, r24	; 21
 4a8:	08 95       	ret
		}
		else if(value == HIGH)
 4aa:	41 11       	cpse	r20, r1
 4ac:	25 c0       	rjmp	.+74     	; 0x4f8 <DIO_write+0xee>
		{
			PORTC |= (1<<pinNumber);
 4ae:	25 b3       	in	r18, 0x15	; 21
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	02 c0       	rjmp	.+4      	; 0x4ba <DIO_write+0xb0>
 4b6:	88 0f       	add	r24, r24
 4b8:	99 1f       	adc	r25, r25
 4ba:	6a 95       	dec	r22
 4bc:	e2 f7       	brpl	.-8      	; 0x4b6 <DIO_write+0xac>
 4be:	82 2b       	or	r24, r18
 4c0:	85 bb       	out	0x15, r24	; 21
 4c2:	08 95       	ret
		}
		else{}
		break;
		
		case PORT_D :
		if(value == LOW){
 4c4:	41 30       	cpi	r20, 0x01	; 1
 4c6:	61 f4       	brne	.+24     	; 0x4e0 <DIO_write+0xd6>
			PORTD &= ~(1<<pinNumber);
 4c8:	22 b3       	in	r18, 0x12	; 18
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	02 c0       	rjmp	.+4      	; 0x4d4 <DIO_write+0xca>
 4d0:	88 0f       	add	r24, r24
 4d2:	99 1f       	adc	r25, r25
 4d4:	6a 95       	dec	r22
 4d6:	e2 f7       	brpl	.-8      	; 0x4d0 <DIO_write+0xc6>
 4d8:	80 95       	com	r24
 4da:	82 23       	and	r24, r18
 4dc:	82 bb       	out	0x12, r24	; 18
 4de:	08 95       	ret
		}
		else if(value == HIGH)
 4e0:	41 11       	cpse	r20, r1
 4e2:	0a c0       	rjmp	.+20     	; 0x4f8 <DIO_write+0xee>
		{
			PORTD |= (1<<pinNumber);
 4e4:	22 b3       	in	r18, 0x12	; 18
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <DIO_write+0xe6>
 4ec:	88 0f       	add	r24, r24
 4ee:	99 1f       	adc	r25, r25
 4f0:	6a 95       	dec	r22
 4f2:	e2 f7       	brpl	.-8      	; 0x4ec <DIO_write+0xe2>
 4f4:	82 2b       	or	r24, r18
 4f6:	82 bb       	out	0x12, r24	; 18
 4f8:	08 95       	ret

000004fa <DIO_toggle>:
		else{}
		break;	
	}
}
void DIO_toggle(uint8_t portNumber, uint8_t pinNumber){
	switch(portNumber){
 4fa:	82 34       	cpi	r24, 0x42	; 66
 4fc:	a1 f0       	breq	.+40     	; 0x526 <DIO_toggle+0x2c>
 4fe:	18 f4       	brcc	.+6      	; 0x506 <DIO_toggle+0xc>
 500:	81 34       	cpi	r24, 0x41	; 65
 502:	31 f0       	breq	.+12     	; 0x510 <DIO_toggle+0x16>
 504:	08 95       	ret
 506:	83 34       	cpi	r24, 0x43	; 67
 508:	c9 f0       	breq	.+50     	; 0x53c <DIO_toggle+0x42>
 50a:	84 34       	cpi	r24, 0x44	; 68
 50c:	11 f1       	breq	.+68     	; 0x552 <DIO_toggle+0x58>
 50e:	08 95       	ret
		case PORT_A:
		PORTA ^= (1<<pinNumber);
 510:	2b b3       	in	r18, 0x1b	; 27
 512:	81 e0       	ldi	r24, 0x01	; 1
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	02 c0       	rjmp	.+4      	; 0x51c <DIO_toggle+0x22>
 518:	88 0f       	add	r24, r24
 51a:	99 1f       	adc	r25, r25
 51c:	6a 95       	dec	r22
 51e:	e2 f7       	brpl	.-8      	; 0x518 <DIO_toggle+0x1e>
 520:	82 27       	eor	r24, r18
 522:	8b bb       	out	0x1b, r24	; 27
		break;
 524:	08 95       	ret
		
		case PORT_B:
		PORTB ^= (1<<pinNumber);
 526:	28 b3       	in	r18, 0x18	; 24
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	02 c0       	rjmp	.+4      	; 0x532 <DIO_toggle+0x38>
 52e:	88 0f       	add	r24, r24
 530:	99 1f       	adc	r25, r25
 532:	6a 95       	dec	r22
 534:	e2 f7       	brpl	.-8      	; 0x52e <DIO_toggle+0x34>
 536:	82 27       	eor	r24, r18
 538:	88 bb       	out	0x18, r24	; 24
		break;
 53a:	08 95       	ret
		
		case PORT_C:
		PORTC ^= (1<<pinNumber);
 53c:	25 b3       	in	r18, 0x15	; 21
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	02 c0       	rjmp	.+4      	; 0x548 <DIO_toggle+0x4e>
 544:	88 0f       	add	r24, r24
 546:	99 1f       	adc	r25, r25
 548:	6a 95       	dec	r22
 54a:	e2 f7       	brpl	.-8      	; 0x544 <DIO_toggle+0x4a>
 54c:	82 27       	eor	r24, r18
 54e:	85 bb       	out	0x15, r24	; 21
		break;
 550:	08 95       	ret
		
		case PORT_D:
		PORTD ^= (1<<pinNumber);
 552:	22 b3       	in	r18, 0x12	; 18
 554:	81 e0       	ldi	r24, 0x01	; 1
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	02 c0       	rjmp	.+4      	; 0x55e <DIO_toggle+0x64>
 55a:	88 0f       	add	r24, r24
 55c:	99 1f       	adc	r25, r25
 55e:	6a 95       	dec	r22
 560:	e2 f7       	brpl	.-8      	; 0x55a <DIO_toggle+0x60>
 562:	82 27       	eor	r24, r18
 564:	82 bb       	out	0x12, r24	; 18
 566:	08 95       	ret

00000568 <Timer0_Init>:
 568:	13 be       	out	0x33, r1	; 51
 56a:	12 be       	out	0x32, r1	; 50
 56c:	08 95       	ret

0000056e <TIMER0_delay>:
 56e:	83 b7       	in	r24, 0x33	; 51
 570:	81 60       	ori	r24, 0x01	; 1
 572:	83 bf       	out	0x33, r24	; 51
 574:	0f c0       	rjmp	.+30     	; 0x594 <TIMER0_delay+0x26>
 576:	08 b6       	in	r0, 0x38	; 56
 578:	00 fe       	sbrs	r0, 0
 57a:	fd cf       	rjmp	.-6      	; 0x576 <TIMER0_delay+0x8>
 57c:	88 b7       	in	r24, 0x38	; 56
 57e:	81 60       	ori	r24, 0x01	; 1
 580:	88 bf       	out	0x38, r24	; 56
 582:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 586:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 58a:	01 96       	adiw	r24, 0x01	; 1
 58c:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
 590:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 594:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 598:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 59c:	8c 34       	cpi	r24, 0x4C	; 76
 59e:	9c 44       	sbci	r25, 0x4C	; 76
 5a0:	10 f4       	brcc	.+4      	; 0x5a6 <TIMER0_delay+0x38>
 5a2:	82 9b       	sbis	0x10, 2	; 16
 5a4:	e8 cf       	rjmp	.-48     	; 0x576 <TIMER0_delay+0x8>
 5a6:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__data_end+0x1>
 5aa:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
 5ae:	13 be       	out	0x33, r1	; 51
 5b0:	08 95       	ret

000005b2 <TIMER0_delay2>:
 5b2:	83 b7       	in	r24, 0x33	; 51
 5b4:	81 60       	ori	r24, 0x01	; 1
 5b6:	83 bf       	out	0x33, r24	; 51
 5b8:	0f c0       	rjmp	.+30     	; 0x5d8 <TIMER0_delay2+0x26>
 5ba:	08 b6       	in	r0, 0x38	; 56
 5bc:	00 fe       	sbrs	r0, 0
 5be:	fd cf       	rjmp	.-6      	; 0x5ba <TIMER0_delay2+0x8>
 5c0:	88 b7       	in	r24, 0x38	; 56
 5c2:	81 60       	ori	r24, 0x01	; 1
 5c4:	88 bf       	out	0x38, r24	; 56
 5c6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 5ca:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 5ce:	01 96       	adiw	r24, 0x01	; 1
 5d0:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
 5d4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 5d8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 5dc:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 5e0:	8c 34       	cpi	r24, 0x4C	; 76
 5e2:	9c 44       	sbci	r25, 0x4C	; 76
 5e4:	50 f3       	brcs	.-44     	; 0x5ba <TIMER0_delay2+0x8>
 5e6:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__data_end+0x1>
 5ea:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
 5ee:	13 be       	out	0x33, r1	; 51
 5f0:	08 95       	ret

000005f2 <TIMER_blink>:
 5f2:	83 b7       	in	r24, 0x33	; 51
 5f4:	81 60       	ori	r24, 0x01	; 1
 5f6:	83 bf       	out	0x33, r24	; 51
 5f8:	1d c0       	rjmp	.+58     	; 0x634 <TIMER_blink+0x42>
 5fa:	08 b6       	in	r0, 0x38	; 56
 5fc:	00 fe       	sbrs	r0, 0
 5fe:	fd cf       	rjmp	.-6      	; 0x5fa <TIMER_blink+0x8>
 600:	88 b7       	in	r24, 0x38	; 56
 602:	81 60       	ori	r24, 0x01	; 1
 604:	88 bf       	out	0x38, r24	; 56
 606:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 60a:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 60e:	01 96       	adiw	r24, 0x01	; 1
 610:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
 614:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 618:	61 ea       	ldi	r22, 0xA1	; 161
 61a:	77 e0       	ldi	r23, 0x07	; 7
 61c:	0e 94 53 03 	call	0x6a6	; 0x6a6 <__udivmodhi4>
 620:	89 2b       	or	r24, r25
 622:	41 f4       	brne	.+16     	; 0x634 <TIMER_blink+0x42>
 624:	61 e0       	ldi	r22, 0x01	; 1
 626:	82 e4       	ldi	r24, 0x42	; 66
 628:	0e 94 83 01 	call	0x306	; 0x306 <LED_TOGGLE>
 62c:	61 e0       	ldi	r22, 0x01	; 1
 62e:	81 e4       	ldi	r24, 0x41	; 65
 630:	0e 94 83 01 	call	0x306	; 0x306 <LED_TOGGLE>
 634:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 638:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 63c:	8c 34       	cpi	r24, 0x4C	; 76
 63e:	9c 44       	sbci	r25, 0x4C	; 76
 640:	e0 f2       	brcs	.-72     	; 0x5fa <TIMER_blink+0x8>
 642:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__data_end+0x1>
 646:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
 64a:	13 be       	out	0x33, r1	; 51
 64c:	08 95       	ret

0000064e <TIMER_blink_car>:
 64e:	83 b7       	in	r24, 0x33	; 51
 650:	81 60       	ori	r24, 0x01	; 1
 652:	83 bf       	out	0x33, r24	; 51
 654:	19 c0       	rjmp	.+50     	; 0x688 <TIMER_blink_car+0x3a>
 656:	08 b6       	in	r0, 0x38	; 56
 658:	00 fe       	sbrs	r0, 0
 65a:	fd cf       	rjmp	.-6      	; 0x656 <TIMER_blink_car+0x8>
 65c:	88 b7       	in	r24, 0x38	; 56
 65e:	81 60       	ori	r24, 0x01	; 1
 660:	88 bf       	out	0x38, r24	; 56
 662:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 666:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 66a:	01 96       	adiw	r24, 0x01	; 1
 66c:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
 670:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 674:	61 ea       	ldi	r22, 0xA1	; 161
 676:	77 e0       	ldi	r23, 0x07	; 7
 678:	0e 94 53 03 	call	0x6a6	; 0x6a6 <__udivmodhi4>
 67c:	89 2b       	or	r24, r25
 67e:	21 f4       	brne	.+8      	; 0x688 <TIMER_blink_car+0x3a>
 680:	61 e0       	ldi	r22, 0x01	; 1
 682:	81 e4       	ldi	r24, 0x41	; 65
 684:	0e 94 83 01 	call	0x306	; 0x306 <LED_TOGGLE>
 688:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 68c:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 690:	8c 34       	cpi	r24, 0x4C	; 76
 692:	9c 44       	sbci	r25, 0x4C	; 76
 694:	10 f4       	brcc	.+4      	; 0x69a <TIMER_blink_car+0x4c>
 696:	82 9b       	sbis	0x10, 2	; 16
 698:	de cf       	rjmp	.-68     	; 0x656 <TIMER_blink_car+0x8>
 69a:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__data_end+0x1>
 69e:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
 6a2:	13 be       	out	0x33, r1	; 51
 6a4:	08 95       	ret

000006a6 <__udivmodhi4>:
 6a6:	aa 1b       	sub	r26, r26
 6a8:	bb 1b       	sub	r27, r27
 6aa:	51 e1       	ldi	r21, 0x11	; 17
 6ac:	07 c0       	rjmp	.+14     	; 0x6bc <__udivmodhi4_ep>

000006ae <__udivmodhi4_loop>:
 6ae:	aa 1f       	adc	r26, r26
 6b0:	bb 1f       	adc	r27, r27
 6b2:	a6 17       	cp	r26, r22
 6b4:	b7 07       	cpc	r27, r23
 6b6:	10 f0       	brcs	.+4      	; 0x6bc <__udivmodhi4_ep>
 6b8:	a6 1b       	sub	r26, r22
 6ba:	b7 0b       	sbc	r27, r23

000006bc <__udivmodhi4_ep>:
 6bc:	88 1f       	adc	r24, r24
 6be:	99 1f       	adc	r25, r25
 6c0:	5a 95       	dec	r21
 6c2:	a9 f7       	brne	.-22     	; 0x6ae <__udivmodhi4_loop>
 6c4:	80 95       	com	r24
 6c6:	90 95       	com	r25
 6c8:	bc 01       	movw	r22, r24
 6ca:	cd 01       	movw	r24, r26
 6cc:	08 95       	ret

000006ce <_exit>:
 6ce:	f8 94       	cli

000006d0 <__stop_program>:
 6d0:	ff cf       	rjmp	.-2      	; 0x6d0 <__stop_program>
