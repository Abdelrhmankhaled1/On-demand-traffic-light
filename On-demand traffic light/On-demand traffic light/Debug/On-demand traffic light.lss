
On-demand traffic light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000006ce  00000762  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800062  00800062  00000764  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000764  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000794  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  000007d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001083  00000000  00000000  00000928  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000090a  00000000  00000000  000019ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a8c  00000000  00000000  000022b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000020c  00000000  00000000  00002d44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004af  00000000  00000000  00002f50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000043a  00000000  00000000  000033ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00003839  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 2c 01 	jmp	0x258	; 0x258 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ec       	ldi	r30, 0xCE	; 206
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 84 01 	call	0x308	; 0x308 <main>
  8a:	0c 94 65 03 	jmp	0x6ca	; 0x6ca <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <app_init>:
int flag = 1;


void app_init(void){
	
	BUTTON_INIT(BUTTON_PORT,BUTTON_PIN);
  92:	60 b3       	in	r22, 0x10	; 16
  94:	64 70       	andi	r22, 0x04	; 4
  96:	84 e4       	ldi	r24, 0x44	; 68
  98:	0e 94 3a 01 	call	0x274	; 0x274 <BUTTON_INIT>

	LED_INIT(PORT_B,PIN0);
  9c:	60 e0       	ldi	r22, 0x00	; 0
  9e:	82 e4       	ldi	r24, 0x42	; 66
  a0:	0e 94 75 01 	call	0x2ea	; 0x2ea <LED_INIT>
	LED_INIT(PORT_B,PIN1);
  a4:	61 e0       	ldi	r22, 0x01	; 1
  a6:	82 e4       	ldi	r24, 0x42	; 66
  a8:	0e 94 75 01 	call	0x2ea	; 0x2ea <LED_INIT>
	LED_INIT(PORT_B,PIN2);
  ac:	62 e0       	ldi	r22, 0x02	; 2
  ae:	82 e4       	ldi	r24, 0x42	; 66
  b0:	0e 94 75 01 	call	0x2ea	; 0x2ea <LED_INIT>
	
	LED_INIT(PORT_A,PIN0);
  b4:	60 e0       	ldi	r22, 0x00	; 0
  b6:	81 e4       	ldi	r24, 0x41	; 65
  b8:	0e 94 75 01 	call	0x2ea	; 0x2ea <LED_INIT>
	LED_INIT(PORT_A,PIN1);
  bc:	61 e0       	ldi	r22, 0x01	; 1
  be:	81 e4       	ldi	r24, 0x41	; 65
  c0:	0e 94 75 01 	call	0x2ea	; 0x2ea <LED_INIT>
	LED_INIT(PORT_A,PIN2);
  c4:	62 e0       	ldi	r22, 0x02	; 2
  c6:	81 e4       	ldi	r24, 0x41	; 65
  c8:	0e 94 75 01 	call	0x2ea	; 0x2ea <LED_INIT>
	
	Timer0_Init();
  cc:	0e 94 b2 02 	call	0x564	; 0x564 <Timer0_Init>
	sei();
  d0:	78 94       	sei
	RISING_EDGE_SETUP();
  d2:	85 b7       	in	r24, 0x35	; 53
  d4:	83 60       	ori	r24, 0x03	; 3
  d6:	85 bf       	out	0x35, r24	; 53
	SETUP_INT0();
  d8:	8b b7       	in	r24, 0x3b	; 59
  da:	80 64       	ori	r24, 0x40	; 64
  dc:	8b bf       	out	0x3b, r24	; 59
  de:	08 95       	ret

000000e0 <test>:
		}
		Car_yellow_led_timer();
	}
}

int test(){
  e0:	0f 93       	push	r16
  e2:	1f 93       	push	r17
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
	if(flag == 0){
  e8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
  ec:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
  f0:	89 2b       	or	r24, r25
  f2:	09 f0       	breq	.+2      	; 0xf6 <test+0x16>
  f4:	5b c0       	rjmp	.+182    	; 0x1ac <test+0xcc>
		if(State == 1){
  f6:	c0 91 64 00 	lds	r28, 0x0064	; 0x800064 <State>
  fa:	d0 91 65 00 	lds	r29, 0x0065	; 0x800065 <State+0x1>
  fe:	c1 30       	cpi	r28, 0x01	; 1
 100:	d1 05       	cpc	r29, r1
 102:	79 f5       	brne	.+94     	; 0x162 <test+0x82>
			
			ALL_OFF();
 104:	0e 94 3e 01 	call	0x27c	; 0x27c <ALL_OFF>
			LED_ON(PORT_B,PIN2);
 108:	62 e0       	ldi	r22, 0x02	; 2
 10a:	82 e4       	ldi	r24, 0x42	; 66
 10c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_ON>
			Yellow_led_timer();
 110:	0e 94 64 01 	call	0x2c8	; 0x2c8 <Yellow_led_timer>
			LED_OFF(PORT_B,PIN2);
 114:	62 e0       	ldi	r22, 0x02	; 2
 116:	82 e4       	ldi	r24, 0x42	; 66
 118:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LED_OFF>
			
			LED_ON(PORT_B,PIN0);
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	82 e4       	ldi	r24, 0x42	; 66
 120:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_ON>
			State = 0;
 124:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <State+0x1>
 128:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <State>
			LED_ON(PORT_A,PIN2);
 12c:	62 e0       	ldi	r22, 0x02	; 2
 12e:	81 e4       	ldi	r24, 0x41	; 65
 130:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_ON>
			TIMER0_delay();
 134:	0e 94 b5 02 	call	0x56a	; 0x56a <TIMER0_delay>
			LED_OFF(PORT_B,PIN0);
 138:	60 e0       	ldi	r22, 0x00	; 0
 13a:	82 e4       	ldi	r24, 0x42	; 66
 13c:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LED_OFF>
			State = 1;
 140:	01 e0       	ldi	r16, 0x01	; 1
 142:	10 e0       	ldi	r17, 0x00	; 0
 144:	10 93 65 00 	sts	0x0065, r17	; 0x800065 <State+0x1>
 148:	00 93 64 00 	sts	0x0064, r16	; 0x800064 <State>
			LED_OFF(PORT_A,PIN2);
 14c:	62 e0       	ldi	r22, 0x02	; 2
 14e:	81 e4       	ldi	r24, 0x41	; 65
 150:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LED_OFF>
			Yellow_led_timer();
 154:	0e 94 64 01 	call	0x2c8	; 0x2c8 <Yellow_led_timer>
			flag = 1;
 158:	10 93 61 00 	sts	0x0061, r17	; 0x800061 <__data_start+0x1>
 15c:	00 93 60 00 	sts	0x0060, r16	; 0x800060 <__data_start>
			return 1;
 160:	27 c0       	rjmp	.+78     	; 0x1b0 <test+0xd0>
		}
		else{
			ALL_OFF();
 162:	0e 94 3e 01 	call	0x27c	; 0x27c <ALL_OFF>
			
			State = 0;
 166:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <State+0x1>
 16a:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <State>
			LED_ON(PORT_A,PIN2); //car red
 16e:	62 e0       	ldi	r22, 0x02	; 2
 170:	81 e4       	ldi	r24, 0x41	; 65
 172:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_ON>
			LED_ON(PORT_B,PIN0); //ped green
 176:	60 e0       	ldi	r22, 0x00	; 0
 178:	82 e4       	ldi	r24, 0x42	; 66
 17a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_ON>
			TIMER0_delay();
 17e:	0e 94 b5 02 	call	0x56a	; 0x56a <TIMER0_delay>
			TIMER0_delay2();
 182:	0e 94 d7 02 	call	0x5ae	; 0x5ae <TIMER0_delay2>
			LED_OFF(PORT_A,PIN2);
 186:	62 e0       	ldi	r22, 0x02	; 2
 188:	81 e4       	ldi	r24, 0x41	; 65
 18a:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LED_OFF>
			LED_OFF(PORT_B,PIN0);
 18e:	60 e0       	ldi	r22, 0x00	; 0
 190:	82 e4       	ldi	r24, 0x42	; 66
 192:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LED_OFF>
			Yellow_led_timer();
 196:	0e 94 64 01 	call	0x2c8	; 0x2c8 <Yellow_led_timer>
			flag = 1;
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
 1a2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
			return 1;
 1a6:	c1 e0       	ldi	r28, 0x01	; 1
 1a8:	d0 e0       	ldi	r29, 0x00	; 0
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <test+0xd0>
		}
	}
	return 0;
 1ac:	c0 e0       	ldi	r28, 0x00	; 0
 1ae:	d0 e0       	ldi	r29, 0x00	; 0
}
 1b0:	ce 01       	movw	r24, r28
 1b2:	df 91       	pop	r29
 1b4:	cf 91       	pop	r28
 1b6:	1f 91       	pop	r17
 1b8:	0f 91       	pop	r16
 1ba:	08 95       	ret

000001bc <app_start>:
}


void app_start(void){
	while(1){
		ALL_OFF();
 1bc:	0e 94 3e 01 	call	0x27c	; 0x27c <ALL_OFF>
		State = 1;
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <State+0x1>
 1c8:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <State>
		LED_ON(PORT_A,PIN0);
 1cc:	60 e0       	ldi	r22, 0x00	; 0
 1ce:	81 e4       	ldi	r24, 0x41	; 65
 1d0:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_ON>
		if(test() == 1){
 1d4:	0e 94 70 00 	call	0xe0	; 0xe0 <test>
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	81 f3       	breq	.-32     	; 0x1bc <app_start>
			continue;
		}
		TIMER0_delay();
 1dc:	0e 94 b5 02 	call	0x56a	; 0x56a <TIMER0_delay>
		if(test() == 1){
 1e0:	0e 94 70 00 	call	0xe0	; 0xe0 <test>
 1e4:	01 97       	sbiw	r24, 0x01	; 1
 1e6:	51 f3       	breq	.-44     	; 0x1bc <app_start>
			continue;
		}
		State = 1;
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <State+0x1>
 1f0:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <State>
		LED_OFF(PORT_A,PIN0);
 1f4:	60 e0       	ldi	r22, 0x00	; 0
 1f6:	81 e4       	ldi	r24, 0x41	; 65
 1f8:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LED_OFF>
		if(test() == 1){
 1fc:	0e 94 70 00 	call	0xe0	; 0xe0 <test>
 200:	01 97       	sbiw	r24, 0x01	; 1
 202:	e1 f2       	breq	.-72     	; 0x1bc <app_start>
			continue;
		}
		Car_yellow_led_timer();
 204:	0e 94 57 01 	call	0x2ae	; 0x2ae <Car_yellow_led_timer>
		if(test() == 1){
 208:	0e 94 70 00 	call	0xe0	; 0xe0 <test>
 20c:	01 97       	sbiw	r24, 0x01	; 1
 20e:	b1 f2       	breq	.-84     	; 0x1bc <app_start>
			continue;
		}
		State = 0;
 210:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <State+0x1>
 214:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <State>
		LED_ON(PORT_A,PIN2);
 218:	62 e0       	ldi	r22, 0x02	; 2
 21a:	81 e4       	ldi	r24, 0x41	; 65
 21c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_ON>
		if(test() == 1){
 220:	0e 94 70 00 	call	0xe0	; 0xe0 <test>
 224:	01 97       	sbiw	r24, 0x01	; 1
 226:	51 f2       	breq	.-108    	; 0x1bc <app_start>
			continue;
		}
		TIMER0_delay();
 228:	0e 94 b5 02 	call	0x56a	; 0x56a <TIMER0_delay>
		if(test() == 1){
 22c:	0e 94 70 00 	call	0xe0	; 0xe0 <test>
 230:	01 97       	sbiw	r24, 0x01	; 1
 232:	21 f2       	breq	.-120    	; 0x1bc <app_start>
			continue;
		}
		State = 1;
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <State+0x1>
 23c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <State>
		LED_OFF(PORT_A,PIN2);
 240:	62 e0       	ldi	r22, 0x02	; 2
 242:	81 e4       	ldi	r24, 0x41	; 65
 244:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LED_OFF>
		if(test() == 1){
 248:	0e 94 70 00 	call	0xe0	; 0xe0 <test>
 24c:	01 97       	sbiw	r24, 0x01	; 1
 24e:	09 f4       	brne	.+2      	; 0x252 <app_start+0x96>
 250:	b5 cf       	rjmp	.-150    	; 0x1bc <app_start>
			continue;
		}
		Car_yellow_led_timer();
 252:	0e 94 57 01 	call	0x2ae	; 0x2ae <Car_yellow_led_timer>
 256:	b2 cf       	rjmp	.-156    	; 0x1bc <app_start>

00000258 <__vector_1>:
		}
	}
	return 0;
}

ISR(EXT_INT_0){
 258:	1f 92       	push	r1
 25a:	0f 92       	push	r0
 25c:	0f b6       	in	r0, 0x3f	; 63
 25e:	0f 92       	push	r0
 260:	11 24       	eor	r1, r1
	flag = 0;
 262:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__data_start+0x1>
 266:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
 26a:	0f 90       	pop	r0
 26c:	0f be       	out	0x3f, r0	; 63
 26e:	0f 90       	pop	r0
 270:	1f 90       	pop	r1
 272:	18 95       	reti

00000274 <BUTTON_INIT>:

#include "Buttons.h"


void BUTTON_INIT(uint8_t BPort, uint8_t BPin){
	DIO_init(BPort,BPin,IN);
 274:	40 e0       	ldi	r20, 0x00	; 0
 276:	0e 94 89 01 	call	0x312	; 0x312 <DIO_init>
 27a:	08 95       	ret

0000027c <ALL_OFF>:
 */ 

#include "Control.h"

void ALL_OFF(){
	LED_OFF(PORT_B,PIN0);
 27c:	60 e0       	ldi	r22, 0x00	; 0
 27e:	82 e4       	ldi	r24, 0x42	; 66
 280:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LED_OFF>
	LED_OFF(PORT_A,PIN0);
 284:	60 e0       	ldi	r22, 0x00	; 0
 286:	81 e4       	ldi	r24, 0x41	; 65
 288:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LED_OFF>
	LED_OFF(PORT_B,PIN1);
 28c:	61 e0       	ldi	r22, 0x01	; 1
 28e:	82 e4       	ldi	r24, 0x42	; 66
 290:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LED_OFF>
	LED_OFF(PORT_A,PIN1);
 294:	61 e0       	ldi	r22, 0x01	; 1
 296:	81 e4       	ldi	r24, 0x41	; 65
 298:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LED_OFF>
	LED_OFF(PORT_B,PIN2);
 29c:	62 e0       	ldi	r22, 0x02	; 2
 29e:	82 e4       	ldi	r24, 0x42	; 66
 2a0:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LED_OFF>
	LED_OFF(PORT_A,PIN2);
 2a4:	62 e0       	ldi	r22, 0x02	; 2
 2a6:	81 e4       	ldi	r24, 0x41	; 65
 2a8:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LED_OFF>
 2ac:	08 95       	ret

000002ae <Car_yellow_led_timer>:
}

void Car_yellow_led_timer(){
	TIMER_blink_car();
 2ae:	0e 94 25 03 	call	0x64a	; 0x64a <TIMER_blink_car>
	State = 1;
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <State+0x1>
 2ba:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <State>
	LED_OFF(PORT_A,PIN1);
 2be:	61 e0       	ldi	r22, 0x01	; 1
 2c0:	81 e4       	ldi	r24, 0x41	; 65
 2c2:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LED_OFF>
 2c6:	08 95       	ret

000002c8 <Yellow_led_timer>:
}


void Yellow_led_timer(){
	TIMER_blink();
 2c8:	0e 94 f7 02 	call	0x5ee	; 0x5ee <TIMER_blink>
	LED_OFF(PORT_B,PIN1);
 2cc:	61 e0       	ldi	r22, 0x01	; 1
 2ce:	82 e4       	ldi	r24, 0x42	; 66
 2d0:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LED_OFF>
	State = 1;
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <State+0x1>
 2dc:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <State>
	LED_OFF(PORT_A,PIN1);
 2e0:	61 e0       	ldi	r22, 0x01	; 1
 2e2:	81 e4       	ldi	r24, 0x41	; 65
 2e4:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LED_OFF>
 2e8:	08 95       	ret

000002ea <LED_INIT>:

#include "LEDS.h"


void LED_INIT(uint8_t LPORT, uint8_t LPIN){
	DIO_init(LPORT,LPIN,OUT);
 2ea:	41 e0       	ldi	r20, 0x01	; 1
 2ec:	0e 94 89 01 	call	0x312	; 0x312 <DIO_init>
 2f0:	08 95       	ret

000002f2 <LED_ON>:
}

void LED_ON(uint8_t LPORT, uint8_t LPIN){
	DIO_write(LPORT,LPIN,HIGH);
 2f2:	40 e0       	ldi	r20, 0x00	; 0
 2f4:	0e 94 03 02 	call	0x406	; 0x406 <DIO_write>
 2f8:	08 95       	ret

000002fa <LED_OFF>:
}

void LED_OFF(uint8_t LPORT, uint8_t LPIN){
	DIO_write(LPORT,LPIN,LOW);
 2fa:	41 e0       	ldi	r20, 0x01	; 1
 2fc:	0e 94 03 02 	call	0x406	; 0x406 <DIO_write>
 300:	08 95       	ret

00000302 <LED_TOGGLE>:
}

void LED_TOGGLE(uint8_t LPORT, uint8_t LPIN){
	DIO_toggle(LPORT,LPIN);
 302:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <DIO_toggle>
 306:	08 95       	ret

00000308 <main>:
#include "Application/Application.h"
#define F_CPU 1000000UL

int main(void)
{
	app_init();
 308:	0e 94 49 00 	call	0x92	; 0x92 <app_init>
	while (1)
	{
		app_start();
 30c:	0e 94 de 00 	call	0x1bc	; 0x1bc <app_start>
 310:	fd cf       	rjmp	.-6      	; 0x30c <main+0x4>

00000312 <DIO_init>:
 */ 

#include "DIO.h"

void DIO_init(uint8_t portNumber, uint8_t pinNumber, uint8_t direction){
	switch(portNumber){
 312:	82 34       	cpi	r24, 0x42	; 66
 314:	31 f1       	breq	.+76     	; 0x362 <DIO_init+0x50>
 316:	18 f4       	brcc	.+6      	; 0x31e <DIO_init+0xc>
 318:	81 34       	cpi	r24, 0x41	; 65
 31a:	39 f0       	breq	.+14     	; 0x32a <DIO_init+0x18>
 31c:	08 95       	ret
 31e:	83 34       	cpi	r24, 0x43	; 67
 320:	e1 f1       	breq	.+120    	; 0x39a <DIO_init+0x88>
 322:	84 34       	cpi	r24, 0x44	; 68
 324:	09 f4       	brne	.+2      	; 0x328 <DIO_init+0x16>
 326:	54 c0       	rjmp	.+168    	; 0x3d0 <DIO_init+0xbe>
 328:	08 95       	ret
		case PORT_A:
		if(direction == IN){
 32a:	41 11       	cpse	r20, r1
 32c:	0c c0       	rjmp	.+24     	; 0x346 <DIO_init+0x34>
			DDRA &= ~(1<<pinNumber);
 32e:	2a b3       	in	r18, 0x1a	; 26
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	02 c0       	rjmp	.+4      	; 0x33a <DIO_init+0x28>
 336:	88 0f       	add	r24, r24
 338:	99 1f       	adc	r25, r25
 33a:	6a 95       	dec	r22
 33c:	e2 f7       	brpl	.-8      	; 0x336 <DIO_init+0x24>
 33e:	80 95       	com	r24
 340:	82 23       	and	r24, r18
 342:	8a bb       	out	0x1a, r24	; 26
 344:	08 95       	ret
		}
		else if(direction == OUT)
 346:	41 30       	cpi	r20, 0x01	; 1
 348:	09 f0       	breq	.+2      	; 0x34c <DIO_init+0x3a>
 34a:	5c c0       	rjmp	.+184    	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
		{
			DDRA |= (1<<pinNumber);
 34c:	2a b3       	in	r18, 0x1a	; 26
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	02 c0       	rjmp	.+4      	; 0x358 <DIO_init+0x46>
 354:	88 0f       	add	r24, r24
 356:	99 1f       	adc	r25, r25
 358:	6a 95       	dec	r22
 35a:	e2 f7       	brpl	.-8      	; 0x354 <DIO_init+0x42>
 35c:	82 2b       	or	r24, r18
 35e:	8a bb       	out	0x1a, r24	; 26
 360:	08 95       	ret
		}
		else{}
		break;
		
		case PORT_B:
		if(direction == IN){
 362:	41 11       	cpse	r20, r1
 364:	0c c0       	rjmp	.+24     	; 0x37e <DIO_init+0x6c>
			DDRB &= ~(1<<pinNumber);
 366:	27 b3       	in	r18, 0x17	; 23
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	02 c0       	rjmp	.+4      	; 0x372 <DIO_init+0x60>
 36e:	88 0f       	add	r24, r24
 370:	99 1f       	adc	r25, r25
 372:	6a 95       	dec	r22
 374:	e2 f7       	brpl	.-8      	; 0x36e <DIO_init+0x5c>
 376:	80 95       	com	r24
 378:	82 23       	and	r24, r18
 37a:	87 bb       	out	0x17, r24	; 23
 37c:	08 95       	ret
		}
		else if(direction == OUT)
 37e:	41 30       	cpi	r20, 0x01	; 1
 380:	09 f0       	breq	.+2      	; 0x384 <DIO_init+0x72>
 382:	40 c0       	rjmp	.+128    	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
		{
			DDRB |= (1<<pinNumber);
 384:	27 b3       	in	r18, 0x17	; 23
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	02 c0       	rjmp	.+4      	; 0x390 <DIO_init+0x7e>
 38c:	88 0f       	add	r24, r24
 38e:	99 1f       	adc	r25, r25
 390:	6a 95       	dec	r22
 392:	e2 f7       	brpl	.-8      	; 0x38c <DIO_init+0x7a>
 394:	82 2b       	or	r24, r18
 396:	87 bb       	out	0x17, r24	; 23
 398:	08 95       	ret
		}
		else{}
		break;
		
		case PORT_C:
		if(direction == IN){
 39a:	41 11       	cpse	r20, r1
 39c:	0c c0       	rjmp	.+24     	; 0x3b6 <DIO_init+0xa4>
			DDRC &= ~(1<<pinNumber);
 39e:	24 b3       	in	r18, 0x14	; 20
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <DIO_init+0x98>
 3a6:	88 0f       	add	r24, r24
 3a8:	99 1f       	adc	r25, r25
 3aa:	6a 95       	dec	r22
 3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <DIO_init+0x94>
 3ae:	80 95       	com	r24
 3b0:	82 23       	and	r24, r18
 3b2:	84 bb       	out	0x14, r24	; 20
 3b4:	08 95       	ret
		}
		else if(direction == OUT)
 3b6:	41 30       	cpi	r20, 0x01	; 1
 3b8:	29 f5       	brne	.+74     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
		{
			DDRC |= (1<<pinNumber);
 3ba:	24 b3       	in	r18, 0x14	; 20
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <DIO_init+0xb4>
 3c2:	88 0f       	add	r24, r24
 3c4:	99 1f       	adc	r25, r25
 3c6:	6a 95       	dec	r22
 3c8:	e2 f7       	brpl	.-8      	; 0x3c2 <DIO_init+0xb0>
 3ca:	82 2b       	or	r24, r18
 3cc:	84 bb       	out	0x14, r24	; 20
 3ce:	08 95       	ret
		}
		else{}
		break;
		
		case PORT_D:
		if(direction == IN){
 3d0:	41 11       	cpse	r20, r1
 3d2:	0c c0       	rjmp	.+24     	; 0x3ec <DIO_init+0xda>
			DDRD &= ~(1<<pinNumber);
 3d4:	21 b3       	in	r18, 0x11	; 17
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	02 c0       	rjmp	.+4      	; 0x3e0 <DIO_init+0xce>
 3dc:	88 0f       	add	r24, r24
 3de:	99 1f       	adc	r25, r25
 3e0:	6a 95       	dec	r22
 3e2:	e2 f7       	brpl	.-8      	; 0x3dc <DIO_init+0xca>
 3e4:	80 95       	com	r24
 3e6:	82 23       	and	r24, r18
 3e8:	81 bb       	out	0x11, r24	; 17
 3ea:	08 95       	ret
		}
		else if(direction == OUT)
 3ec:	41 30       	cpi	r20, 0x01	; 1
 3ee:	51 f4       	brne	.+20     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
		{
			DDRD |= (1<<pinNumber);
 3f0:	21 b3       	in	r18, 0x11	; 17
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	02 c0       	rjmp	.+4      	; 0x3fc <DIO_init+0xea>
 3f8:	88 0f       	add	r24, r24
 3fa:	99 1f       	adc	r25, r25
 3fc:	6a 95       	dec	r22
 3fe:	e2 f7       	brpl	.-8      	; 0x3f8 <DIO_init+0xe6>
 400:	82 2b       	or	r24, r18
 402:	81 bb       	out	0x11, r24	; 17
 404:	08 95       	ret

00000406 <DIO_write>:
		else{}
		break;
	}
}
void DIO_write(uint8_t portNumber, uint8_t pinNumber, uint8_t value){
	switch(portNumber){
 406:	82 34       	cpi	r24, 0x42	; 66
 408:	29 f1       	breq	.+74     	; 0x454 <DIO_write+0x4e>
 40a:	18 f4       	brcc	.+6      	; 0x412 <DIO_write+0xc>
 40c:	81 34       	cpi	r24, 0x41	; 65
 40e:	39 f0       	breq	.+14     	; 0x41e <DIO_write+0x18>
 410:	08 95       	ret
 412:	83 34       	cpi	r24, 0x43	; 67
 414:	d1 f1       	breq	.+116    	; 0x48a <DIO_write+0x84>
 416:	84 34       	cpi	r24, 0x44	; 68
 418:	09 f4       	brne	.+2      	; 0x41c <DIO_write+0x16>
 41a:	52 c0       	rjmp	.+164    	; 0x4c0 <DIO_write+0xba>
 41c:	08 95       	ret
		case PORT_A :
		if(value == LOW){
 41e:	41 30       	cpi	r20, 0x01	; 1
 420:	61 f4       	brne	.+24     	; 0x43a <DIO_write+0x34>
			PORTA &= ~(1<<pinNumber);
 422:	2b b3       	in	r18, 0x1b	; 27
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	02 c0       	rjmp	.+4      	; 0x42e <DIO_write+0x28>
 42a:	88 0f       	add	r24, r24
 42c:	99 1f       	adc	r25, r25
 42e:	6a 95       	dec	r22
 430:	e2 f7       	brpl	.-8      	; 0x42a <DIO_write+0x24>
 432:	80 95       	com	r24
 434:	82 23       	and	r24, r18
 436:	8b bb       	out	0x1b, r24	; 27
 438:	08 95       	ret
		}
		else if(value == HIGH)
 43a:	41 11       	cpse	r20, r1
 43c:	5b c0       	rjmp	.+182    	; 0x4f4 <DIO_write+0xee>
		{
			PORTA |= (1<<pinNumber);
 43e:	2b b3       	in	r18, 0x1b	; 27
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	02 c0       	rjmp	.+4      	; 0x44a <DIO_write+0x44>
 446:	88 0f       	add	r24, r24
 448:	99 1f       	adc	r25, r25
 44a:	6a 95       	dec	r22
 44c:	e2 f7       	brpl	.-8      	; 0x446 <DIO_write+0x40>
 44e:	82 2b       	or	r24, r18
 450:	8b bb       	out	0x1b, r24	; 27
 452:	08 95       	ret
		}
		else{}
		break;
		
		case PORT_B :
		if(value == LOW){
 454:	41 30       	cpi	r20, 0x01	; 1
 456:	61 f4       	brne	.+24     	; 0x470 <DIO_write+0x6a>
			PORTB &= ~(1<<pinNumber);
 458:	28 b3       	in	r18, 0x18	; 24
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	02 c0       	rjmp	.+4      	; 0x464 <DIO_write+0x5e>
 460:	88 0f       	add	r24, r24
 462:	99 1f       	adc	r25, r25
 464:	6a 95       	dec	r22
 466:	e2 f7       	brpl	.-8      	; 0x460 <DIO_write+0x5a>
 468:	80 95       	com	r24
 46a:	82 23       	and	r24, r18
 46c:	88 bb       	out	0x18, r24	; 24
 46e:	08 95       	ret
		}
		else if(value == HIGH)
 470:	41 11       	cpse	r20, r1
 472:	40 c0       	rjmp	.+128    	; 0x4f4 <DIO_write+0xee>
		{
			PORTB |= (1<<pinNumber);
 474:	28 b3       	in	r18, 0x18	; 24
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	02 c0       	rjmp	.+4      	; 0x480 <DIO_write+0x7a>
 47c:	88 0f       	add	r24, r24
 47e:	99 1f       	adc	r25, r25
 480:	6a 95       	dec	r22
 482:	e2 f7       	brpl	.-8      	; 0x47c <DIO_write+0x76>
 484:	82 2b       	or	r24, r18
 486:	88 bb       	out	0x18, r24	; 24
 488:	08 95       	ret
		}
		else{}
		break;
		
		case PORT_C :
		if(value == LOW){
 48a:	41 30       	cpi	r20, 0x01	; 1
 48c:	61 f4       	brne	.+24     	; 0x4a6 <DIO_write+0xa0>
			PORTC &= ~(1<<pinNumber);
 48e:	25 b3       	in	r18, 0x15	; 21
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	02 c0       	rjmp	.+4      	; 0x49a <DIO_write+0x94>
 496:	88 0f       	add	r24, r24
 498:	99 1f       	adc	r25, r25
 49a:	6a 95       	dec	r22
 49c:	e2 f7       	brpl	.-8      	; 0x496 <DIO_write+0x90>
 49e:	80 95       	com	r24
 4a0:	82 23       	and	r24, r18
 4a2:	85 bb       	out	0x15, r24	; 21
 4a4:	08 95       	ret
		}
		else if(value == HIGH)
 4a6:	41 11       	cpse	r20, r1
 4a8:	25 c0       	rjmp	.+74     	; 0x4f4 <DIO_write+0xee>
		{
			PORTC |= (1<<pinNumber);
 4aa:	25 b3       	in	r18, 0x15	; 21
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <DIO_write+0xb0>
 4b2:	88 0f       	add	r24, r24
 4b4:	99 1f       	adc	r25, r25
 4b6:	6a 95       	dec	r22
 4b8:	e2 f7       	brpl	.-8      	; 0x4b2 <DIO_write+0xac>
 4ba:	82 2b       	or	r24, r18
 4bc:	85 bb       	out	0x15, r24	; 21
 4be:	08 95       	ret
		}
		else{}
		break;
		
		case PORT_D :
		if(value == LOW){
 4c0:	41 30       	cpi	r20, 0x01	; 1
 4c2:	61 f4       	brne	.+24     	; 0x4dc <DIO_write+0xd6>
			PORTD &= ~(1<<pinNumber);
 4c4:	22 b3       	in	r18, 0x12	; 18
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <DIO_write+0xca>
 4cc:	88 0f       	add	r24, r24
 4ce:	99 1f       	adc	r25, r25
 4d0:	6a 95       	dec	r22
 4d2:	e2 f7       	brpl	.-8      	; 0x4cc <DIO_write+0xc6>
 4d4:	80 95       	com	r24
 4d6:	82 23       	and	r24, r18
 4d8:	82 bb       	out	0x12, r24	; 18
 4da:	08 95       	ret
		}
		else if(value == HIGH)
 4dc:	41 11       	cpse	r20, r1
 4de:	0a c0       	rjmp	.+20     	; 0x4f4 <DIO_write+0xee>
		{
			PORTD |= (1<<pinNumber);
 4e0:	22 b3       	in	r18, 0x12	; 18
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	02 c0       	rjmp	.+4      	; 0x4ec <DIO_write+0xe6>
 4e8:	88 0f       	add	r24, r24
 4ea:	99 1f       	adc	r25, r25
 4ec:	6a 95       	dec	r22
 4ee:	e2 f7       	brpl	.-8      	; 0x4e8 <DIO_write+0xe2>
 4f0:	82 2b       	or	r24, r18
 4f2:	82 bb       	out	0x12, r24	; 18
 4f4:	08 95       	ret

000004f6 <DIO_toggle>:
		else{}
		break;	
	}
}
void DIO_toggle(uint8_t portNumber, uint8_t pinNumber){
	switch(portNumber){
 4f6:	82 34       	cpi	r24, 0x42	; 66
 4f8:	a1 f0       	breq	.+40     	; 0x522 <DIO_toggle+0x2c>
 4fa:	18 f4       	brcc	.+6      	; 0x502 <DIO_toggle+0xc>
 4fc:	81 34       	cpi	r24, 0x41	; 65
 4fe:	31 f0       	breq	.+12     	; 0x50c <DIO_toggle+0x16>
 500:	08 95       	ret
 502:	83 34       	cpi	r24, 0x43	; 67
 504:	c9 f0       	breq	.+50     	; 0x538 <DIO_toggle+0x42>
 506:	84 34       	cpi	r24, 0x44	; 68
 508:	11 f1       	breq	.+68     	; 0x54e <DIO_toggle+0x58>
 50a:	08 95       	ret
		case PORT_A:
		PORTA ^= (1<<pinNumber);
 50c:	2b b3       	in	r18, 0x1b	; 27
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	02 c0       	rjmp	.+4      	; 0x518 <DIO_toggle+0x22>
 514:	88 0f       	add	r24, r24
 516:	99 1f       	adc	r25, r25
 518:	6a 95       	dec	r22
 51a:	e2 f7       	brpl	.-8      	; 0x514 <DIO_toggle+0x1e>
 51c:	82 27       	eor	r24, r18
 51e:	8b bb       	out	0x1b, r24	; 27
		break;
 520:	08 95       	ret
		
		case PORT_B:
		PORTB ^= (1<<pinNumber);
 522:	28 b3       	in	r18, 0x18	; 24
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	02 c0       	rjmp	.+4      	; 0x52e <DIO_toggle+0x38>
 52a:	88 0f       	add	r24, r24
 52c:	99 1f       	adc	r25, r25
 52e:	6a 95       	dec	r22
 530:	e2 f7       	brpl	.-8      	; 0x52a <DIO_toggle+0x34>
 532:	82 27       	eor	r24, r18
 534:	88 bb       	out	0x18, r24	; 24
		break;
 536:	08 95       	ret
		
		case PORT_C:
		PORTC ^= (1<<pinNumber);
 538:	25 b3       	in	r18, 0x15	; 21
 53a:	81 e0       	ldi	r24, 0x01	; 1
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	02 c0       	rjmp	.+4      	; 0x544 <DIO_toggle+0x4e>
 540:	88 0f       	add	r24, r24
 542:	99 1f       	adc	r25, r25
 544:	6a 95       	dec	r22
 546:	e2 f7       	brpl	.-8      	; 0x540 <DIO_toggle+0x4a>
 548:	82 27       	eor	r24, r18
 54a:	85 bb       	out	0x15, r24	; 21
		break;
 54c:	08 95       	ret
		
		case PORT_D:
		PORTD ^= (1<<pinNumber);
 54e:	22 b3       	in	r18, 0x12	; 18
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	02 c0       	rjmp	.+4      	; 0x55a <DIO_toggle+0x64>
 556:	88 0f       	add	r24, r24
 558:	99 1f       	adc	r25, r25
 55a:	6a 95       	dec	r22
 55c:	e2 f7       	brpl	.-8      	; 0x556 <DIO_toggle+0x60>
 55e:	82 27       	eor	r24, r18
 560:	82 bb       	out	0x12, r24	; 18
 562:	08 95       	ret

00000564 <Timer0_Init>:
#include "Timers.h"
#include "../../ECUAL/Buttons/Buttons.h"
#include "../../ECUAL/Control/Control.h"

void Timer0_Init(){
	TCCR0 = 0x00;
 564:	13 be       	out	0x33, r1	; 51
	TCNT0 = 0x00;
 566:	12 be       	out	0x32, r1	; 50
 568:	08 95       	ret

0000056a <TIMER0_delay>:
	
}

void TIMER0_delay(){ 
	TCCR0 |= (1<<0);
 56a:	83 b7       	in	r24, 0x33	; 51
 56c:	81 60       	ori	r24, 0x01	; 1
 56e:	83 bf       	out	0x33, r24	; 51
	while(i < overflows && ((BUTTON_PIN) == 0) ){   
 570:	0f c0       	rjmp	.+30     	; 0x590 <TIMER0_delay+0x26>
		while((TIFR & (1<<0)) == 0 );
 572:	08 b6       	in	r0, 0x38	; 56
 574:	00 fe       	sbrs	r0, 0
 576:	fd cf       	rjmp	.-6      	; 0x572 <TIMER0_delay+0x8>
		TIFR |= (1<<0);
 578:	88 b7       	in	r24, 0x38	; 56
 57a:	81 60       	ori	r24, 0x01	; 1
 57c:	88 bf       	out	0x38, r24	; 56
		i++;
 57e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 582:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 586:	01 96       	adiw	r24, 0x01	; 1
 588:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
 58c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
	
}

void TIMER0_delay(){ 
	TCCR0 |= (1<<0);
	while(i < overflows && ((BUTTON_PIN) == 0) ){   
 590:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 594:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 598:	8c 34       	cpi	r24, 0x4C	; 76
 59a:	9c 44       	sbci	r25, 0x4C	; 76
 59c:	10 f4       	brcc	.+4      	; 0x5a2 <TIMER0_delay+0x38>
 59e:	82 9b       	sbis	0x10, 2	; 16
 5a0:	e8 cf       	rjmp	.-48     	; 0x572 <TIMER0_delay+0x8>
		while((TIFR & (1<<0)) == 0 );
		TIFR |= (1<<0);
		i++;
	}
	i = 0;
 5a2:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__data_end+0x1>
 5a6:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
			
	TCCR0 = 0x00;
 5aa:	13 be       	out	0x33, r1	; 51
 5ac:	08 95       	ret

000005ae <TIMER0_delay2>:
}

void TIMER0_delay2(){
	TCCR0 |= (1<<0);
 5ae:	83 b7       	in	r24, 0x33	; 51
 5b0:	81 60       	ori	r24, 0x01	; 1
 5b2:	83 bf       	out	0x33, r24	; 51
	while(i < overflows){
 5b4:	0f c0       	rjmp	.+30     	; 0x5d4 <TIMER0_delay2+0x26>
		while((TIFR & (1<<0)) == 0 );
 5b6:	08 b6       	in	r0, 0x38	; 56
 5b8:	00 fe       	sbrs	r0, 0
 5ba:	fd cf       	rjmp	.-6      	; 0x5b6 <TIMER0_delay2+0x8>
		TIFR |= (1<<0);
 5bc:	88 b7       	in	r24, 0x38	; 56
 5be:	81 60       	ori	r24, 0x01	; 1
 5c0:	88 bf       	out	0x38, r24	; 56
		i++;
 5c2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 5c6:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 5ca:	01 96       	adiw	r24, 0x01	; 1
 5cc:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
 5d0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
	TCCR0 = 0x00;
}

void TIMER0_delay2(){
	TCCR0 |= (1<<0);
	while(i < overflows){
 5d4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 5d8:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 5dc:	8c 34       	cpi	r24, 0x4C	; 76
 5de:	9c 44       	sbci	r25, 0x4C	; 76
 5e0:	50 f3       	brcs	.-44     	; 0x5b6 <TIMER0_delay2+0x8>
		while((TIFR & (1<<0)) == 0 );
		TIFR |= (1<<0);
		i++;
	}
	i = 0;
 5e2:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__data_end+0x1>
 5e6:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
	TCCR0 = 0x00;
 5ea:	13 be       	out	0x33, r1	; 51
 5ec:	08 95       	ret

000005ee <TIMER_blink>:
}

void TIMER_blink(){
	TCCR0 |= (1<<0);
 5ee:	83 b7       	in	r24, 0x33	; 51
 5f0:	81 60       	ori	r24, 0x01	; 1
 5f2:	83 bf       	out	0x33, r24	; 51
	while(i < overflows){
 5f4:	1d c0       	rjmp	.+58     	; 0x630 <TIMER_blink+0x42>
		while((TIFR & (1<<0)) == 0 );
 5f6:	08 b6       	in	r0, 0x38	; 56
 5f8:	00 fe       	sbrs	r0, 0
 5fa:	fd cf       	rjmp	.-6      	; 0x5f6 <TIMER_blink+0x8>
		TIFR |= (1<<0);
 5fc:	88 b7       	in	r24, 0x38	; 56
 5fe:	81 60       	ori	r24, 0x01	; 1
 600:	88 bf       	out	0x38, r24	; 56
		i++;
 602:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 606:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 60a:	01 96       	adiw	r24, 0x01	; 1
 60c:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
 610:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
		if(i % 1953 == 0){
 614:	61 ea       	ldi	r22, 0xA1	; 161
 616:	77 e0       	ldi	r23, 0x07	; 7
 618:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__udivmodhi4>
 61c:	89 2b       	or	r24, r25
 61e:	41 f4       	brne	.+16     	; 0x630 <TIMER_blink+0x42>
			LED_TOGGLE(PORT_B,PIN1);
 620:	61 e0       	ldi	r22, 0x01	; 1
 622:	82 e4       	ldi	r24, 0x42	; 66
 624:	0e 94 81 01 	call	0x302	; 0x302 <LED_TOGGLE>
			LED_TOGGLE(PORT_A,PIN1);
 628:	61 e0       	ldi	r22, 0x01	; 1
 62a:	81 e4       	ldi	r24, 0x41	; 65
 62c:	0e 94 81 01 	call	0x302	; 0x302 <LED_TOGGLE>
	TCCR0 = 0x00;
}

void TIMER_blink(){
	TCCR0 |= (1<<0);
	while(i < overflows){
 630:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 634:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 638:	8c 34       	cpi	r24, 0x4C	; 76
 63a:	9c 44       	sbci	r25, 0x4C	; 76
 63c:	e0 f2       	brcs	.-72     	; 0x5f6 <TIMER_blink+0x8>
		if(i % 1953 == 0){
			LED_TOGGLE(PORT_B,PIN1);
			LED_TOGGLE(PORT_A,PIN1);
		}
	}
	i = 0;
 63e:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__data_end+0x1>
 642:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
	TCCR0 = 0x00;
 646:	13 be       	out	0x33, r1	; 51
 648:	08 95       	ret

0000064a <TIMER_blink_car>:
}

void TIMER_blink_car(){
	TCCR0 |= (1<<0);
 64a:	83 b7       	in	r24, 0x33	; 51
 64c:	81 60       	ori	r24, 0x01	; 1
 64e:	83 bf       	out	0x33, r24	; 51
	while(i < overflows  && ((BUTTON_PIN) == 0) ){ 
 650:	19 c0       	rjmp	.+50     	; 0x684 <TIMER_blink_car+0x3a>
		while((TIFR & (1<<0)) == 0 );
 652:	08 b6       	in	r0, 0x38	; 56
 654:	00 fe       	sbrs	r0, 0
 656:	fd cf       	rjmp	.-6      	; 0x652 <TIMER_blink_car+0x8>
		TIFR |= (1<<0);
 658:	88 b7       	in	r24, 0x38	; 56
 65a:	81 60       	ori	r24, 0x01	; 1
 65c:	88 bf       	out	0x38, r24	; 56
		i++;
 65e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 662:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 666:	01 96       	adiw	r24, 0x01	; 1
 668:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
 66c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
		if(i % 1953 == 0){
 670:	61 ea       	ldi	r22, 0xA1	; 161
 672:	77 e0       	ldi	r23, 0x07	; 7
 674:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__udivmodhi4>
 678:	89 2b       	or	r24, r25
 67a:	21 f4       	brne	.+8      	; 0x684 <TIMER_blink_car+0x3a>
				LED_TOGGLE(PORT_A,PIN1);
 67c:	61 e0       	ldi	r22, 0x01	; 1
 67e:	81 e4       	ldi	r24, 0x41	; 65
 680:	0e 94 81 01 	call	0x302	; 0x302 <LED_TOGGLE>
	TCCR0 = 0x00;
}

void TIMER_blink_car(){
	TCCR0 |= (1<<0);
	while(i < overflows  && ((BUTTON_PIN) == 0) ){ 
 684:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 688:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 68c:	8c 34       	cpi	r24, 0x4C	; 76
 68e:	9c 44       	sbci	r25, 0x4C	; 76
 690:	10 f4       	brcc	.+4      	; 0x696 <TIMER_blink_car+0x4c>
 692:	82 9b       	sbis	0x10, 2	; 16
 694:	de cf       	rjmp	.-68     	; 0x652 <TIMER_blink_car+0x8>
		i++;
		if(i % 1953 == 0){
				LED_TOGGLE(PORT_A,PIN1);
		}
	}
	i = 0;
 696:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__data_end+0x1>
 69a:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
	TCCR0 = 0x00;
 69e:	13 be       	out	0x33, r1	; 51
 6a0:	08 95       	ret

000006a2 <__udivmodhi4>:
 6a2:	aa 1b       	sub	r26, r26
 6a4:	bb 1b       	sub	r27, r27
 6a6:	51 e1       	ldi	r21, 0x11	; 17
 6a8:	07 c0       	rjmp	.+14     	; 0x6b8 <__udivmodhi4_ep>

000006aa <__udivmodhi4_loop>:
 6aa:	aa 1f       	adc	r26, r26
 6ac:	bb 1f       	adc	r27, r27
 6ae:	a6 17       	cp	r26, r22
 6b0:	b7 07       	cpc	r27, r23
 6b2:	10 f0       	brcs	.+4      	; 0x6b8 <__udivmodhi4_ep>
 6b4:	a6 1b       	sub	r26, r22
 6b6:	b7 0b       	sbc	r27, r23

000006b8 <__udivmodhi4_ep>:
 6b8:	88 1f       	adc	r24, r24
 6ba:	99 1f       	adc	r25, r25
 6bc:	5a 95       	dec	r21
 6be:	a9 f7       	brne	.-22     	; 0x6aa <__udivmodhi4_loop>
 6c0:	80 95       	com	r24
 6c2:	90 95       	com	r25
 6c4:	bc 01       	movw	r22, r24
 6c6:	cd 01       	movw	r24, r26
 6c8:	08 95       	ret

000006ca <_exit>:
 6ca:	f8 94       	cli

000006cc <__stop_program>:
 6cc:	ff cf       	rjmp	.-2      	; 0x6cc <__stop_program>
